Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00 600000030     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry>::_List_iterator(std::__detail::_List_node_base*)
  0.00      0.00     0.00 400000022     0.00     0.00  std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end()
  0.00      0.00     0.00 400000018     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const
  0.00      0.00     0.00 203010002     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::operator[](unsigned long)
  0.00      0.00     0.00 203010000     0.00     0.00  STM::GetDesc(int)
  0.00      0.00     0.00 200000008     0.00     0.00  std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin()
  0.00      0.00     0.00 200000006     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry>::operator*() const
  0.00      0.00     0.00 200000006     0.00     0.00  std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&)
  0.00      0.00     0.00 100000000     0.00     0.00  TxDescriptor::open_for_read(void*)
  0.00      0.00     0.00 100000000     0.00     0.00  TxDescriptor::open_for_write(void*, unsigned long)
  0.00      0.00     0.00 100000000     0.00     0.00  int STM::Load<int>(int, int*)
  0.00      0.00     0.00 100000000     0.00     0.00  void STM::Store<int>(int, int*, int)
  0.00      0.00     0.00 100000000     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1})
  0.00      0.00     0.00 100000000     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1})
  0.00      0.00     0.00 100000000     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred)
  0.00      0.00     0.00 100000000     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred)
  0.00      0.00     0.00 100000000     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1})
  0.00      0.00     0.00 100000000     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1})
  0.00      0.00     0.00 100000000     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>)
  0.00      0.00     0.00 100000000     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag)
  0.00      0.00     0.00 100000000     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>)
  0.00      0.00     0.00 100000000     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag)
  0.00      0.00     0.00 99999998     0.00     0.00  bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>)
  0.00      0.00     0.00 99999998     0.00     0.00  bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>)
  0.00      0.00     0.00 99999998     0.00     0.00  TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const
  0.00      0.00     0.00 99999998     0.00     0.00  TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const
  0.00      0.00     0.00  1048580     0.00     0.00  LockVar::TestWriteBit() const
  0.00      0.00     0.00       12     0.00     0.00  __gthread_active_p()
  0.00      0.00     0.00       11     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const
  0.00      0.00     0.00       10     0.00     0.00  std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&)
  0.00      0.00     0.00       10     0.00     0.00  int&& std::forward<int>(std::remove_reference<int>::type&)
  0.00      0.00     0.00        9     0.00     0.00  VersionedWriteLock::AddrToLockVar(void*, bool)
  0.00      0.00     0.00        8     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator()
  0.00      0.00     0.00        8     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_Node_allocator()
  0.00      0.00     0.00        8     0.00     0.00  operator new(unsigned long, void*)
  0.00      0.00     0.00        7     0.00     0.00  void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int)
  0.00      0.00     0.00        6     0.00     0.00  __gthread_mutex_lock(pthread_mutex_t*)
  0.00      0.00     0.00        6     0.00     0.00  __gthread_mutex_unlock(pthread_mutex_t*)
  0.00      0.00     0.00        6     0.00     0.00  std::_Iter_base<void**, false>::_S_base(void**)
  0.00      0.00     0.00        6     0.00     0.00  std::lock_guard<std::mutex>::lock_guard(std::mutex&)
  0.00      0.00     0.00        6     0.00     0.00  std::lock_guard<std::mutex>::~lock_guard()
  0.00      0.00     0.00        6     0.00     0.00  void std::_Destroy_aux<true>::__destroy<void**>(void**, void**)
  0.00      0.00     0.00        6     0.00     0.00  std::mutex::lock()
  0.00      0.00     0.00        6     0.00     0.00  std::mutex::unlock()
  0.00      0.00     0.00        6     0.00     0.00  std::_Niter_base<void**>::iterator_type std::__niter_base<void**>(void**)
  0.00      0.00     0.00        6     0.00     0.00  void std::_Destroy<void**>(void**, void**)
  0.00      0.00     0.00        6     0.00     0.00  void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&)
  0.00      0.00     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~new_allocator()
  0.00      0.00     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::deallocate(std::_List_node<TxDescriptor::LogEntry>*, unsigned long)
  0.00      0.00     0.00        4     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::destroy<std::_List_node<TxDescriptor::LogEntry> >(std::_List_node<TxDescriptor::LogEntry>*)
  0.00      0.00     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::allocate(unsigned long, void const*)
  0.00      0.00     0.00        4     0.00     0.00  _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN12TxDescriptor8LogEntryEEE9constructIS4_IEEEvPT_DpOT0_
  0.00      0.00     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<void*>::max_size() const
  0.00      0.00     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::max_size() const
  0.00      0.00     0.00        4     0.00     0.00  std::move_iterator<void**>::base() const
  0.00      0.00     0.00        4     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator()
  0.00      0.00     0.00        4     0.00     0.00  std::_Iter_base<std::move_iterator<void**>, true>::_S_base(std::move_iterator<void**>)
  0.00      0.00     0.00        4     0.00     0.00  std::_List_node<TxDescriptor::LogEntry>::_List_node<>()
  0.00      0.00     0.00        4     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator()
  0.00      0.00     0.00        4     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_M_deallocate(void**, unsigned long)
  0.00      0.00     0.00        4     0.00     0.00  std::move_iterator<void**>::move_iterator(void**)
  0.00      0.00     0.00        4     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry>::operator--()
  0.00      0.00     0.00        4     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry>::operator++()
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_node()
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_inc_size(unsigned long)
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_put_node(std::_List_node<TxDescriptor::LogEntry>*)
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_set_size(unsigned long)
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_init()
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear()
  0.00      0.00     0.00        4     0.00     0.00  void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>()
  0.00      0.00     0.00        4     0.00     0.00  std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>()
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back()
  0.00      0.00     0.00        4     0.00     0.00  void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_insert<>(std::_List_iterator<TxDescriptor::LogEntry>)
  0.00      0.00     0.00        4     0.00     0.00  std::_Miter_base<std::move_iterator<void**> >::iterator_type std::__miter_base<std::move_iterator<void**> >(std::move_iterator<void**>)
  0.00      0.00     0.00        4     0.00     0.00  std::move_iterator<void**> std::__make_move_if_noexcept_iterator<void**, std::move_iterator<void**> >(void**)
  0.00      0.00     0.00        3     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&)
  0.00      0.00     0.00        3     0.00     0.00  __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_ptr()
  0.00      0.00     0.00        3     0.00     0.00  __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_addr()
  0.00      0.00     0.00        3     0.00     0.00  LockVar::operator*() const
  0.00      0.00     0.00        3     0.00     0.00  __gnu_cxx::new_allocator<TxDescriptor>::max_size() const
  0.00      0.00     0.00        3     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&)
  0.00      0.00     0.00        3     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()
  0.00      0.00     0.00        3     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_ptr()
  0.00      0.00     0.00        3     0.00     0.00  std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
  0.00      0.00     0.00        3     0.00     0.00  std::remove_reference<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>::type&& std::move<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>(std::remove_reference&&)
  0.00      0.00     0.00        2     0.00     0.00  TMAllocList::TMAllocList(unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  TMAllocList::~TMAllocList()
  0.00      0.00     0.00        2     0.00     0.00  LockVar::SetWriteBit()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<void*>::deallocate(void**, unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<void*>::allocate(unsigned long, void const*)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<void*>::new_allocator()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<void*>::~new_allocator()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::new_allocator()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::~new_allocator()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator()
  0.00      0.00     0.00        2     0.00     0.00  bool __gnu_cxx::__is_null_pointer<char>(char*)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::__normal_iterator(void** const&)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2})
  0.00      0.00     0.00        2     0.00     0.00  bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#3})
  0.00      0.00     0.00        2     0.00     0.00  bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2})
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(__gnu_cxx::__ops::_Iter_pred)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred)
  0.00      0.00     0.00        2     0.00     0.00  TxDescriptor::LogEntry::ReferToSameMetadata(LockVar const&) const
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::base() const
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() const
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() const
  0.00      0.00     0.00        2     0.00     0.00  std::move_iterator<TxDescriptor*>::base() const
  0.00      0.00     0.00        2     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::max_size() const
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::size() const
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::capacity() const
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::max_size() const
  0.00      0.00     0.00        2     0.00     0.00  std::allocator<void*>::allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::allocator<void*>::~allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::allocator<std::_List_node<TxDescriptor::LogEntry> >::allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::allocator<std::_List_node<TxDescriptor::LogEntry> >::~allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&)
  0.00      0.00     0.00        2     0.00     0.00  std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&)
  0.00      0.00     0.00        2     0.00     0.00  std::_Head_base<0ul, void (*)(int), false>::_Head_base<void (*)(int)>(void (*&&)(int))
  0.00      0.00     0.00        2     0.00     0.00  std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&)
  0.00      0.00     0.00        2     0.00     0.00  std::_Head_base<1ul, int, false>::_Head_base<int>(int&&)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_node<unsigned long>::_List_node<>()
  0.00      0.00     0.00        2     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::~shared_ptr()
  0.00      0.00     0.00        2     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&)
  0.00      0.00     0.00        2     0.00     0.00  std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&)
  0.00      0.00     0.00        2     0.00     0.00  void** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<void*>(void* const*, void* const*, void**)
  0.00      0.00     0.00        2     0.00     0.00  void std::_Destroy_aux<false>::__destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*)
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_deallocate(TxDescriptor*, unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_M_allocate(unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::_Vector_impl()
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::~_Vector_impl()
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::_Vector_base()
  0.00      0.00     0.00        2     0.00     0.00  std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base()
  0.00      0.00     0.00        2     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()
  0.00      0.00     0.00        2     0.00     0.00  std::move_iterator<TxDescriptor*>::move_iterator(TxDescriptor*)
  0.00      0.00     0.00        2     0.00     0.00  std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>&)
  0.00      0.00     0.00        2     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count()
  0.00      0.00     0.00        2     0.00     0.00  std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.00     0.00        2     0.00     0.00  std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr()
  0.00      0.00     0.00        2     0.00     0.00  std::allocator_traits<std::allocator<TxDescriptor> >::max_size(std::allocator<TxDescriptor> const&)
  0.00      0.00     0.00        2     0.00     0.00  std::allocator_traits<std::allocator<void*> >::deallocate(std::allocator<void*>&, void**, unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  std::allocator_traits<std::allocator<void*> >::allocate(std::allocator<void*>&, unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  std::allocator_traits<std::allocator<void*> >::max_size(std::allocator<void*> const&)
  0.00      0.00     0.00        2     0.00     0.00  void** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**)
  0.00      0.00     0.00        2     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc()
  0.00      0.00     0.00        2     0.00     0.00  std::thread::id::id()
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::_M_erase_at_end(void**)
  0.00      0.00     0.00        2     0.00     0.00  void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>)
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::clear()
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::reserve(unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::vector()
  0.00      0.00     0.00        2     0.00     0.00  std::vector<void*, std::allocator<void*> >::~vector()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::_List_impl()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::~_List_impl()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_base()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~_List_base()
  0.00      0.00     0.00        2     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)
  0.00      0.00     0.00        2     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
  0.00      0.00     0.00        2     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::clear()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::list()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~list()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::to_string(unsigned long)
  0.00      0.00     0.00        2     0.00     0.00  std::_Any_data::_M_access()
  0.00      0.00     0.00        2     0.00     0.00  std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)
  0.00      0.00     0.00        2     0.00     0.00  TxDescriptor* std::__addressof<TxDescriptor>(TxDescriptor&)
  0.00      0.00     0.00        2     0.00     0.00  void** std::__copy_move_a<true, void**, void**>(void**, void**, void**)
  0.00      0.00     0.00        2     0.00     0.00  void** std::__copy_move_a2<true, void**, void**>(void**, void**, void**)
  0.00      0.00     0.00        2     0.00     0.00  void** std::uninitialized_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**)
  0.00      0.00     0.00        2     0.00     0.00  std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)
  0.00      0.00     0.00        2     0.00     0.00  void** std::__uninitialized_copy_a<std::move_iterator<void**>, void**, void*>(std::move_iterator<void**>, std::move_iterator<void**>, void**, std::allocator<void*>&)
  0.00      0.00     0.00        2     0.00     0.00  std::move_iterator<TxDescriptor*> std::__make_move_if_noexcept_iterator<TxDescriptor*, std::move_iterator<TxDescriptor*> >(TxDescriptor*)
  0.00      0.00     0.00        2     0.00     0.00  void** std::copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2})
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3})
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2})
  0.00      0.00     0.00        2     0.00     0.00  void (&std::forward<void (&)(int)>(std::remove_reference<void (&)(int)>::type&))(int)
  0.00      0.00     0.00        2     0.00     0.00  void std::_Destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*)
  0.00      0.00     0.00        2     0.00     0.00  void std::_Destroy<TxDescriptor*, TxDescriptor>(TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&)
  0.00      0.00     0.00        2     0.00     0.00  std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, std::input_iterator_tag)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag)
  0.00      0.00     0.00        2     0.00     0.00  TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}::operator()(TxDescriptor::LogEntry const&) const
  0.00      0.00     0.00        2     0.00     0.00  TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}::operator()(TxDescriptor::LogEntry const&) const
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3STM10desc_tableE
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I_a
  0.00      0.00     0.00        1     0.00     0.00  wo(int)
  0.00      0.00     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.00     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.00     0.00        1     0.00     0.00  __gthread_equal(unsigned long, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::Stats::Stats()
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::reset(bool)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::validate()
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::TxDescriptor()
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::~TxDescriptor()
  0.00      0.00     0.00        1     0.00     0.00  STM::Exit()
  0.00      0.00     0.00        1     0.00     0.00  STM::Init(int)
  0.00      0.00     0.00        1     0.00     0.00  LockVar::ClearWriteBitAndIncTimestamp()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<TxDescriptor>::deallocate(TxDescriptor*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<TxDescriptor>::allocate(unsigned long, void const*)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<TxDescriptor>::new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<TxDescriptor>::~new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*)
  0.00      0.00     0.00        1     0.00     0.00  _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::__aligned_buffer()
  0.00      0.00     0.00        1     0.00     0.00  bool __gnu_cxx::operator!=<void**, std::vector<void*, std::allocator<void*> > >(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&, __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const
  0.00      0.00     0.00        1     0.00     0.00  std::thread::joinable() const
  0.00      0.00     0.00        1     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const
  0.00      0.00     0.00        1     0.00     0.00  std::type_info::operator==(std::type_info const&) const
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<TxDescriptor>::allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<TxDescriptor>::~allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::shared_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&&)
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~shared_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int), int>::_M_tail(std::_Tuple_impl<0ul, void (*)(int), int>&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, int>::_Tuple_impl<int>(int&&)
  0.00      0.00     0.00        1     0.00     0.00  void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>)
  0.00      0.00     0.00        1     0.00     0.00  std::_Bind_simple<void (*(int))(int)>::_Bind_simple(std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Bind_simple<void (*(int))(int)>::operator()()
  0.00      0.00     0.00        1     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_allocate(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::_Vector_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::~_Vector_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::~_Vector_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
  0.00      0.00     0.00        1     0.00     0.00  std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}> const&, std::_Manager_operation)
  0.00      0.00     0.00        1     0.00     0.00  std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>)
  0.00      0.00     0.00        1     0.00     0.00  bool std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_not_empty_function<{lambda(void*, unsigned long)#1}>({lambda(void*, unsigned long)#1} const&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Function_base::_Function_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_Function_base::~_Function_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_Sp_ebo_helper(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::~_Sp_ebo_helper()
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
  0.00      0.00     0.00        1     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_raw_ptr(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::get()
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr))
  0.00      0.00     0.00        1     0.00     0.00  std::aligned_storage<40ul, 8ul>::aligned_storage()
  0.00      0.00     0.00        1     0.00     0.00  std::binary_function<void*, unsigned long, void>::binary_function()
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<TxDescriptor> >::deallocate(std::allocator<TxDescriptor>&, TxDescriptor*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<TxDescriptor> >::allocate(std::allocator<TxDescriptor>&, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*)
  0.00      0.00     0.00        1     0.00     0.00  _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEEE9constructIS7_IS6_EEEvRS8_PT_DpOT0_
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*)
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >)
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl()
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
  0.00      0.00     0.00        1     0.00     0.00  std::_Maybe_wrap_member_pointer<void (*)(int)>::__do_wrap(void (*&&)(int))
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::__uninitialized_default_n_1<false>::__uninit_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::_Maybe_unary_or_binary_function<void, void*, unsigned long>::_Maybe_unary_or_binary_function()
  0.00      0.00     0.00        1     0.00     0.00  std::tuple<void (*)(int), int>::tuple(std::tuple<void (*)(int), int>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_Impl_base::_Impl_base()
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_Impl_base::~_Impl_base()
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::~_Impl()
  0.00      0.00     0.00        1     0.00     0.00  std::thread::thread<void (&)(int), int>(void (&)(int), int&&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::~thread()
  0.00      0.00     0.00        1     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::resize(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::vector<TxDescriptor, std::allocator<TxDescriptor> >::vector()
  0.00      0.00     0.00        1     0.00     0.00  std::vector<void*, std::allocator<void*> >::end()
  0.00      0.00     0.00        1     0.00     0.00  std::vector<void*, std::allocator<void*> >::begin()
  0.00      0.00     0.00        1     0.00     0.00  std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1})
  0.00      0.00     0.00        1     0.00     0.00  std::function<void (void*, unsigned long)>::~function()
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}& std::_Any_data::_M_access<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>()
  0.00      0.00     0.00        1     0.00     0.00  void std::_Construct<TxDescriptor>(TxDescriptor*)
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int)
  0.00      0.00     0.00        1     0.00     0.00  int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&)
  0.00      0.00     0.00        1     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::uninitialized_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::__uninitialized_copy_a<std::move_iterator<TxDescriptor*>, TxDescriptor*, TxDescriptor>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*, std::allocator<TxDescriptor>&)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::__uninitialized_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::__uninitialized_default_n_a<TxDescriptor*, unsigned long, TxDescriptor>(TxDescriptor*, unsigned long, std::allocator<TxDescriptor>&)
  0.00      0.00     0.00        1     0.00     0.00  void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...)
  0.00      0.00     0.00        1     0.00     0.00  TxDescriptor* std::__uninitialized_move_if_noexcept_a<TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor> >(TxDescriptor*, TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&)
  0.00      0.00     0.00        1     0.00     0.00  unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
  0.00      0.00     0.00        1     0.00     0.00  std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&)
  0.00      0.00     0.00        1     0.00     0.00  std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&)
  0.00      0.00     0.00        1     0.00     0.00  std::remove_reference<std::_Tuple_impl<1ul, int>&>::type&& std::move<std::_Tuple_impl<1ul, int>&>(std::_Tuple_impl<1ul, int>&)
  0.00      0.00     0.00        1     0.00     0.00  void std::_Destroy<TxDescriptor>(TxDescriptor*)
  0.00      0.00     0.00        1     0.00     0.00  bool std::operator==<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&)
  0.00      0.00     0.00        1     0.00     0.00  std::operator==(std::thread::id, std::thread::id)
  0.00      0.00     0.00        1     0.00     0.00  bool std::operator!=<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00 200000008/600000030     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin() [13]
                0.00    0.00 400000022/600000030     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
[8]      0.0    0.00    0.00 600000030         std::_List_iterator<TxDescriptor::LogEntry>::_List_iterator(std::__detail::_List_node_base*) [8]
-----------------------------------------------
                0.00    0.00       1/400000022     TxDescriptor::validate() [211]
                0.00    0.00       1/400000022     TxDescriptor::reset(bool) [210]
                0.00    0.00       4/400000022     void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>() [77]
                0.00    0.00       4/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back() [79]
                0.00    0.00 200000004/400000022     TxDescriptor::open_for_write(void*, unsigned long) [17]
                0.00    0.00 200000008/400000022     TxDescriptor::open_for_read(void*) [16]
[9]      0.0    0.00    0.00 400000022         std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00 400000022/600000030     std::_List_iterator<TxDescriptor::LogEntry>::_List_iterator(std::__detail::_List_node_base*) [8]
-----------------------------------------------
                0.00    0.00       2/400000018     TxDescriptor::validate() [211]
                0.00    0.00       2/400000018     TxDescriptor::reset(bool) [210]
                0.00    0.00       2/400000018     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, std::input_iterator_tag) [197]
                0.00    0.00       2/400000018     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [199]
                0.00    0.00       4/400000018     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [195]
                0.00    0.00 100000000/400000018     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [27]
                0.00    0.00 100000000/400000018     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [29]
                0.00    0.00 100000002/400000018     TxDescriptor::open_for_write(void*, unsigned long) [17]
                0.00    0.00 100000004/400000018     TxDescriptor::open_for_read(void*) [16]
[10]     0.0    0.00    0.00 400000018         std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
-----------------------------------------------
                0.00    0.00       1/203010002     STM::Init(int) [215]
                0.00    0.00       1/203010002     STM::Exit() [214]
                0.00    0.00 203010000/203010002     STM::GetDesc(int) [12]
[11]     0.0    0.00    0.00 203010002         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::operator[](unsigned long) [11]
-----------------------------------------------
                0.00    0.00 3010000/203010000     wo(int) [204]
                0.00    0.00 100000000/203010000     void STM::Store<int>(int, int*, int) [19]
                0.00    0.00 100000000/203010000     int STM::Load<int>(int, int*) [18]
[12]     0.0    0.00    0.00 203010000         STM::GetDesc(int) [12]
                0.00    0.00 203010000/203010002     std::vector<TxDescriptor, std::allocator<TxDescriptor> >::operator[](unsigned long) [11]
-----------------------------------------------
                0.00    0.00       1/200000008     TxDescriptor::validate() [211]
                0.00    0.00       1/200000008     TxDescriptor::reset(bool) [210]
                0.00    0.00 100000002/200000008     TxDescriptor::open_for_write(void*, unsigned long) [17]
                0.00    0.00 100000004/200000008     TxDescriptor::open_for_read(void*) [16]
[13]     0.0    0.00    0.00 200000008         std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin() [13]
                0.00    0.00 200000008/600000030     std::_List_iterator<TxDescriptor::LogEntry>::_List_iterator(std::__detail::_List_node_base*) [8]
-----------------------------------------------
                0.00    0.00       1/200000006     TxDescriptor::validate() [211]
                0.00    0.00       1/200000006     TxDescriptor::reset(bool) [210]
                0.00    0.00       2/200000006     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [108]
                0.00    0.00       2/200000006     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [110]
                0.00    0.00       4/200000006     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back() [79]
                0.00    0.00 99999998/200000006     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [30]
                0.00    0.00 99999998/200000006     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [31]
[14]     0.0    0.00    0.00 200000006         std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
-----------------------------------------------
                0.00    0.00       2/200000006     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>) [194]
                0.00    0.00       2/200000006     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>) [196]
                0.00    0.00       2/200000006     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>) [198]
                0.00    0.00 100000000/200000006     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>) [26]
                0.00    0.00 100000000/200000006     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>) [28]
[15]     0.0    0.00    0.00 200000006         std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&) [15]
-----------------------------------------------
                0.00    0.00 100000000/100000000     int STM::Load<int>(int, int*) [18]
[16]     0.0    0.00    0.00 100000000         TxDescriptor::open_for_read(void*) [16]
                0.00    0.00 200000008/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00 100000004/200000008     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin() [13]
                0.00    0.00 100000004/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}) [24]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}) [187]
                0.00    0.00       2/6           std::lock_guard<std::mutex>::lock_guard(std::mutex&) [47]
                0.00    0.00       2/9           VersionedWriteLock::AddrToLockVar(void*, bool) [39]
                0.00    0.00       2/1048580     LockVar::TestWriteBit() const [34]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}) [188]
                0.00    0.00       2/4           void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>() [77]
                0.00    0.00       2/4           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back() [79]
                0.00    0.00       2/3           LockVar::operator*() const [86]
                0.00    0.00       2/6           std::lock_guard<std::mutex>::~lock_guard() [48]
-----------------------------------------------
                0.00    0.00 100000000/100000000     void STM::Store<int>(int, int*, int) [19]
[17]     0.0    0.00    0.00 100000000         TxDescriptor::open_for_write(void*, unsigned long) [17]
                0.00    0.00 200000004/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00 100000002/200000008     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin() [13]
                0.00    0.00 100000002/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}) [25]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}) [189]
                0.00    0.00       2/6           std::lock_guard<std::mutex>::lock_guard(std::mutex&) [47]
                0.00    0.00       2/9           VersionedWriteLock::AddrToLockVar(void*, bool) [39]
                0.00    0.00       2/1048580     LockVar::TestWriteBit() const [34]
                0.00    0.00       2/2           LockVar::SetWriteBit() [95]
                0.00    0.00       2/4           void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>() [77]
                0.00    0.00       2/4           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back() [79]
                0.00    0.00       2/6           std::lock_guard<std::mutex>::~lock_guard() [48]
-----------------------------------------------
                0.00    0.00 100000000/100000000     wo(int) [204]
[18]     0.0    0.00    0.00 100000000         int STM::Load<int>(int, int*) [18]
                0.00    0.00 100000000/203010000     STM::GetDesc(int) [12]
                0.00    0.00 100000000/100000000     TxDescriptor::open_for_read(void*) [16]
-----------------------------------------------
                0.00    0.00 100000000/100000000     wo(int) [204]
[19]     0.0    0.00    0.00 100000000         void STM::Store<int>(int, int*, int) [19]
                0.00    0.00 100000000/203010000     STM::GetDesc(int) [12]
                0.00    0.00 100000000/100000000     TxDescriptor::open_for_write(void*, unsigned long) [17]
-----------------------------------------------
                0.00    0.00 100000000/100000000     __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [22]
[20]     0.0    0.00    0.00 100000000         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1}) [20]
-----------------------------------------------
                0.00    0.00 100000000/100000000     __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [23]
[21]     0.0    0.00    0.00 100000000         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1}) [21]
-----------------------------------------------
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}) [24]
[22]     0.0    0.00    0.00 100000000         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [22]
                0.00    0.00 100000000/100000000     __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1}) [20]
-----------------------------------------------
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}) [25]
[23]     0.0    0.00    0.00 100000000         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [23]
                0.00    0.00 100000000/100000000     __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1}) [21]
-----------------------------------------------
                0.00    0.00 100000000/100000000     TxDescriptor::open_for_read(void*) [16]
[24]     0.0    0.00    0.00 100000000         std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}) [24]
                0.00    0.00 100000000/100000000     __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [22]
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>) [26]
-----------------------------------------------
                0.00    0.00 100000000/100000000     TxDescriptor::open_for_write(void*, unsigned long) [17]
[25]     0.0    0.00    0.00 100000000         std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}) [25]
                0.00    0.00 100000000/100000000     __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [23]
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>) [28]
-----------------------------------------------
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}) [24]
[26]     0.0    0.00    0.00 100000000         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>) [26]
                0.00    0.00 100000000/200000006     std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&) [15]
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [27]
-----------------------------------------------
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>) [26]
[27]     0.0    0.00    0.00 100000000         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [27]
                0.00    0.00 100000000/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00 99999998/99999998     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [30]
-----------------------------------------------
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}) [25]
[28]     0.0    0.00    0.00 100000000         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>) [28]
                0.00    0.00 100000000/200000006     std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&) [15]
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [29]
-----------------------------------------------
                0.00    0.00 100000000/100000000     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>) [28]
[29]     0.0    0.00    0.00 100000000         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [29]
                0.00    0.00 100000000/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00 99999998/99999998     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [31]
-----------------------------------------------
                0.00    0.00 99999998/99999998     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [27]
[30]     0.0    0.00    0.00 99999998         bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [30]
                0.00    0.00 99999998/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
                0.00    0.00 99999998/99999998     TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const [32]
-----------------------------------------------
                0.00    0.00 99999998/99999998     std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag) [29]
[31]     0.0    0.00    0.00 99999998         bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [31]
                0.00    0.00 99999998/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
                0.00    0.00 99999998/99999998     TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const [33]
-----------------------------------------------
                0.00    0.00 99999998/99999998     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [30]
[32]     0.0    0.00    0.00 99999998         TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const [32]
-----------------------------------------------
                0.00    0.00 99999998/99999998     bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [31]
[33]     0.0    0.00    0.00 99999998         TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const [33]
-----------------------------------------------
                0.00    0.00       2/1048580     TxDescriptor::open_for_read(void*) [16]
                0.00    0.00       2/1048580     TxDescriptor::open_for_write(void*, unsigned long) [17]
                0.00    0.00 1048576/1048580     VersionedWriteLock::AddrToLockVar(void*, bool) [39]
[34]     0.0    0.00    0.00 1048580         LockVar::TestWriteBit() const [34]
-----------------------------------------------
                0.00    0.00       6/12          __gthread_mutex_lock(pthread_mutex_t*) [44]
                0.00    0.00       6/12          __gthread_mutex_unlock(pthread_mutex_t*) [45]
[35]     0.0    0.00    0.00      12         __gthread_active_p() [35]
-----------------------------------------------
                0.00    0.00       1/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
                0.00    0.00       2/11          STM::Init(int) [215]
                0.00    0.00       2/11          STM::Exit() [214]
                0.00    0.00       2/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::resize(unsigned long) [303]
                0.00    0.00       4/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const [232]
[36]     0.0    0.00    0.00      11         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [36]
-----------------------------------------------
                0.00    0.00       1/10          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [297]
                0.00    0.00       1/10          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [311]
                0.00    0.00       1/10          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [315]
                0.00    0.00       1/10          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [239]
                0.00    0.00       1/10          std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [258]
                0.00    0.00       1/10          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/10          std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
                0.00    0.00       1/10          _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEEE9constructIS7_IS6_EEEvRS8_PT_DpOT0_ [281]
                0.00    0.00       1/10          _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_ [222]
                0.00    0.00       1/10          std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&) [298]
[37]     0.0    0.00    0.00      10         std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
-----------------------------------------------
                0.00    0.00       1/10          std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
                0.00    0.00       1/10          std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&) [245]
                0.00    0.00       1/10          std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&) [314]
                0.00    0.00       1/10          std::_Tuple_impl<1ul, int>::_Tuple_impl<int>(int&&) [246]
                0.00    0.00       1/10          std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [244]
                0.00    0.00       1/10          std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&) [294]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&) [249]
                0.00    0.00       1/10          void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
                0.00    0.00       2/10          std::_Head_base<1ul, int, false>::_Head_base<int>(int&&) [133]
[38]     0.0    0.00    0.00      10         int&& std::forward<int>(std::remove_reference<int>::type&) [38]
-----------------------------------------------
                0.00    0.00       1/9           wo(int) [204]
                0.00    0.00       1/9           TxDescriptor::validate() [211]
                0.00    0.00       1/9           TxDescriptor::reset(bool) [210]
                0.00    0.00       2/9           TxDescriptor::LogEntry::ReferToSameMetadata(LockVar const&) const [115]
                0.00    0.00       2/9           TxDescriptor::open_for_read(void*) [16]
                0.00    0.00       2/9           TxDescriptor::open_for_write(void*, unsigned long) [17]
[39]     0.0    0.00    0.00       9         VersionedWriteLock::AddrToLockVar(void*, bool) [39]
                0.00    0.00 1048576/1048580     LockVar::TestWriteBit() const [34]
-----------------------------------------------
                0.00    0.00       2/8           std::vector<void*, std::allocator<void*> >::~vector() [164]
                0.00    0.00       2/8           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
                0.00    0.00       2/8           void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>) [160]
                0.00    0.00       2/8           std::vector<void*, std::allocator<void*> >::_M_erase_at_end(void**) [159]
[40]     0.0    0.00    0.00       8         std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() [40]
-----------------------------------------------
                0.00    0.00       4/8           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear() [76]
                0.00    0.00       4/8           std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>() [78]
[41]     0.0    0.00    0.00       8         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_Node_allocator() [41]
-----------------------------------------------
                0.00    0.00       1/8           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>) [263]
                0.00    0.00       1/8           void std::_Construct<TxDescriptor>(TxDescriptor*) [310]
                0.00    0.00       1/8           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/8           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_ [222]
                0.00    0.00       4/8           _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN12TxDescriptor8LogEntryEEE9constructIS4_IEEEvPT_DpOT0_ [59]
[42]     0.0    0.00    0.00       8         operator new(unsigned long, void*) [42]
-----------------------------------------------
                0.00    0.00       1/7           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
                0.00    0.00       1/7           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [244]
                0.00    0.00       1/7           std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&) [294]
                0.00    0.00       1/7           std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&) [249]
                0.00    0.00       1/7           void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
                0.00    0.00       2/7           std::_Head_base<0ul, void (*)(int), false>::_Head_base<void (*)(int)>(void (*&&)(int)) [131]
[43]     0.0    0.00    0.00       7         void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
-----------------------------------------------
                0.00    0.00       6/6           std::mutex::lock() [50]
[44]     0.0    0.00    0.00       6         __gthread_mutex_lock(pthread_mutex_t*) [44]
                0.00    0.00       6/12          __gthread_active_p() [35]
-----------------------------------------------
                0.00    0.00       6/6           std::mutex::unlock() [51]
[45]     0.0    0.00    0.00       6         __gthread_mutex_unlock(pthread_mutex_t*) [45]
                0.00    0.00       6/12          __gthread_active_p() [35]
-----------------------------------------------
                0.00    0.00       6/6           std::_Niter_base<void**>::iterator_type std::__niter_base<void**>(void**) [52]
[46]     0.0    0.00    0.00       6         std::_Iter_base<void**, false>::_S_base(void**) [46]
-----------------------------------------------
                0.00    0.00       1/6           TxDescriptor::validate() [211]
                0.00    0.00       1/6           TxDescriptor::reset(bool) [210]
                0.00    0.00       2/6           TxDescriptor::open_for_read(void*) [16]
                0.00    0.00       2/6           TxDescriptor::open_for_write(void*, unsigned long) [17]
[47]     0.0    0.00    0.00       6         std::lock_guard<std::mutex>::lock_guard(std::mutex&) [47]
                0.00    0.00       6/6           std::mutex::lock() [50]
-----------------------------------------------
                0.00    0.00       1/6           TxDescriptor::validate() [211]
                0.00    0.00       1/6           TxDescriptor::reset(bool) [210]
                0.00    0.00       2/6           TxDescriptor::open_for_read(void*) [16]
                0.00    0.00       2/6           TxDescriptor::open_for_write(void*, unsigned long) [17]
[48]     0.0    0.00    0.00       6         std::lock_guard<std::mutex>::~lock_guard() [48]
                0.00    0.00       6/6           std::mutex::unlock() [51]
-----------------------------------------------
                0.00    0.00       6/6           void std::_Destroy<void**>(void**, void**) [53]
[49]     0.0    0.00    0.00       6         void std::_Destroy_aux<true>::__destroy<void**>(void**, void**) [49]
-----------------------------------------------
                0.00    0.00       6/6           std::lock_guard<std::mutex>::lock_guard(std::mutex&) [47]
[50]     0.0    0.00    0.00       6         std::mutex::lock() [50]
                0.00    0.00       6/6           __gthread_mutex_lock(pthread_mutex_t*) [44]
-----------------------------------------------
                0.00    0.00       6/6           std::lock_guard<std::mutex>::~lock_guard() [48]
[51]     0.0    0.00    0.00       6         std::mutex::unlock() [51]
                0.00    0.00       6/6           __gthread_mutex_unlock(pthread_mutex_t*) [45]
-----------------------------------------------
                0.00    0.00       6/6           void** std::__copy_move_a2<true, void**, void**>(void**, void**, void**) [181]
[52]     0.0    0.00    0.00       6         std::_Niter_base<void**>::iterator_type std::__niter_base<void**>(void**) [52]
                0.00    0.00       6/6           std::_Iter_base<void**, false>::_S_base(void**) [46]
-----------------------------------------------
                0.00    0.00       6/6           void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&) [54]
[53]     0.0    0.00    0.00       6         void std::_Destroy<void**>(void**, void**) [53]
                0.00    0.00       6/6           void std::_Destroy_aux<true>::__destroy<void**>(void**, void**) [49]
-----------------------------------------------
                0.00    0.00       2/6           std::vector<void*, std::allocator<void*> >::~vector() [164]
                0.00    0.00       2/6           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
                0.00    0.00       2/6           std::vector<void*, std::allocator<void*> >::_M_erase_at_end(void**) [159]
[54]     0.0    0.00    0.00       6         void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&) [54]
                0.00    0.00       6/6           void std::_Destroy<void**>(void**, void**) [53]
-----------------------------------------------
                0.00    0.00       4/4           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [63]
[55]     0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~new_allocator() [55]
-----------------------------------------------
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_put_node(std::_List_node<TxDescriptor::LogEntry>*) [73]
[56]     0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::deallocate(std::_List_node<TxDescriptor::LogEntry>*, unsigned long) [56]
-----------------------------------------------
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear() [76]
[57]     0.0    0.00    0.00       4         void __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::destroy<std::_List_node<TxDescriptor::LogEntry> >(std::_List_node<TxDescriptor::LogEntry>*) [57]
-----------------------------------------------
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_node() [71]
[58]     0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::allocate(unsigned long, void const*) [58]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::max_size() const [61]
-----------------------------------------------
                0.00    0.00       4/4           std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>() [78]
[59]     0.0    0.00    0.00       4         _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN12TxDescriptor8LogEntryEEE9constructIS4_IEEEvPT_DpOT0_ [59]
                0.00    0.00       4/8           operator new(unsigned long, void*) [42]
                0.00    0.00       4/4           std::_List_node<TxDescriptor::LogEntry>::_List_node<>() [65]
-----------------------------------------------
                0.00    0.00       2/4           std::allocator_traits<std::allocator<void*> >::max_size(std::allocator<void*> const&) [155]
                0.00    0.00       2/4           __gnu_cxx::new_allocator<void*>::allocate(unsigned long, void const*) [98]
[60]     0.0    0.00    0.00       4         __gnu_cxx::new_allocator<void*>::max_size() const [60]
-----------------------------------------------
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::allocate(unsigned long, void const*) [58]
[61]     0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::max_size() const [61]
-----------------------------------------------
                0.00    0.00       4/4           std::_Iter_base<std::move_iterator<void**>, true>::_S_base(std::move_iterator<void**>) [64]
[62]     0.0    0.00    0.00       4         std::move_iterator<void**>::base() const [62]
-----------------------------------------------
                0.00    0.00       1/4           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [311]
                0.00    0.00       1/4           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/4           std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::~_Sp_ebo_helper() [268]
                0.00    0.00       1/4           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
[63]     0.0    0.00    0.00       4         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [63]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~new_allocator() [55]
-----------------------------------------------
                0.00    0.00       4/4           std::_Miter_base<std::move_iterator<void**> >::iterator_type std::__miter_base<std::move_iterator<void**> >(std::move_iterator<void**>) [81]
[64]     0.0    0.00    0.00       4         std::_Iter_base<std::move_iterator<void**>, true>::_S_base(std::move_iterator<void**>) [64]
                0.00    0.00       4/4           std::move_iterator<void**>::base() const [62]
-----------------------------------------------
                0.00    0.00       4/4           _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN12TxDescriptor8LogEntryEEE9constructIS4_IEEEvPT_DpOT0_ [59]
[65]     0.0    0.00    0.00       4         std::_List_node<TxDescriptor::LogEntry>::_List_node<>() [65]
-----------------------------------------------
                0.00    0.00       1/4           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::~vector() [387]
                0.00    0.00       3/4           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[66]     0.0    0.00    0.00       4         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() [66]
-----------------------------------------------
                0.00    0.00       2/4           std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base() [145]
                0.00    0.00       2/4           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
[67]     0.0    0.00    0.00       4         std::_Vector_base<void*, std::allocator<void*> >::_M_deallocate(void**, unsigned long) [67]
                0.00    0.00       2/2           std::allocator_traits<std::allocator<void*> >::deallocate(std::allocator<void*>&, void**, unsigned long) [153]
-----------------------------------------------
                0.00    0.00       4/4           std::move_iterator<void**> std::__make_move_if_noexcept_iterator<void**, std::move_iterator<void**> >(void**) [82]
[68]     0.0    0.00    0.00       4         std::move_iterator<void**>::move_iterator(void**) [68]
-----------------------------------------------
                0.00    0.00       4/4           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back() [79]
[69]     0.0    0.00    0.00       4         std::_List_iterator<TxDescriptor::LogEntry>::operator--() [69]
-----------------------------------------------
                0.00    0.00       1/4           TxDescriptor::validate() [211]
                0.00    0.00       1/4           TxDescriptor::reset(bool) [210]
                0.00    0.00       2/4           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [195]
[70]     0.0    0.00    0.00       4         std::_List_iterator<TxDescriptor::LogEntry>::operator++() [70]
-----------------------------------------------
                0.00    0.00       4/4           std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>() [78]
[71]     0.0    0.00    0.00       4         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_node() [71]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::allocate(unsigned long, void const*) [58]
-----------------------------------------------
                0.00    0.00       4/4           void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_insert<>(std::_List_iterator<TxDescriptor::LogEntry>) [80]
[72]     0.0    0.00    0.00       4         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_inc_size(unsigned long) [72]
-----------------------------------------------
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear() [76]
[73]     0.0    0.00    0.00       4         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_put_node(std::_List_node<TxDescriptor::LogEntry>*) [73]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::deallocate(std::_List_node<TxDescriptor::LogEntry>*, unsigned long) [56]
-----------------------------------------------
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_init() [75]
[74]     0.0    0.00    0.00       4         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_set_size(unsigned long) [74]
-----------------------------------------------
                0.00    0.00       2/4           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::clear() [173]
                0.00    0.00       2/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_base() [167]
[75]     0.0    0.00    0.00       4         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_init() [75]
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_set_size(unsigned long) [74]
-----------------------------------------------
                0.00    0.00       2/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~_List_base() [168]
                0.00    0.00       2/4           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::clear() [173]
[76]     0.0    0.00    0.00       4         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear() [76]
                0.00    0.00       4/8           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_Node_allocator() [41]
                0.00    0.00       4/4           void __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::destroy<std::_List_node<TxDescriptor::LogEntry> >(std::_List_node<TxDescriptor::LogEntry>*) [57]
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_put_node(std::_List_node<TxDescriptor::LogEntry>*) [73]
-----------------------------------------------
                0.00    0.00       2/4           TxDescriptor::open_for_read(void*) [16]
                0.00    0.00       2/4           TxDescriptor::open_for_write(void*, unsigned long) [17]
[77]     0.0    0.00    0.00       4         void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>() [77]
                0.00    0.00       4/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00       4/4           void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_insert<>(std::_List_iterator<TxDescriptor::LogEntry>) [80]
-----------------------------------------------
                0.00    0.00       4/4           void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_insert<>(std::_List_iterator<TxDescriptor::LogEntry>) [80]
[78]     0.0    0.00    0.00       4         std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>() [78]
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_node() [71]
                0.00    0.00       4/8           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_Node_allocator() [41]
                0.00    0.00       4/4           _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN12TxDescriptor8LogEntryEEE9constructIS4_IEEEvPT_DpOT0_ [59]
-----------------------------------------------
                0.00    0.00       2/4           TxDescriptor::open_for_read(void*) [16]
                0.00    0.00       2/4           TxDescriptor::open_for_write(void*, unsigned long) [17]
[79]     0.0    0.00    0.00       4         std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back() [79]
                0.00    0.00       4/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00       4/4           std::_List_iterator<TxDescriptor::LogEntry>::operator--() [69]
                0.00    0.00       4/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
-----------------------------------------------
                0.00    0.00       4/4           void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>() [77]
[80]     0.0    0.00    0.00       4         void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_insert<>(std::_List_iterator<TxDescriptor::LogEntry>) [80]
                0.00    0.00       4/4           std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>() [78]
                0.00    0.00       4/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_inc_size(unsigned long) [72]
-----------------------------------------------
                0.00    0.00       4/4           void** std::copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [186]
[81]     0.0    0.00    0.00       4         std::_Miter_base<std::move_iterator<void**> >::iterator_type std::__miter_base<std::move_iterator<void**> >(std::move_iterator<void**>) [81]
                0.00    0.00       4/4           std::_Iter_base<std::move_iterator<void**>, true>::_S_base(std::move_iterator<void**>) [64]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
[82]     0.0    0.00    0.00       4         std::move_iterator<void**> std::__make_move_if_noexcept_iterator<void**, std::move_iterator<void**> >(void**) [82]
                0.00    0.00       4/4           std::move_iterator<void**>::move_iterator(void**) [68]
-----------------------------------------------
                0.00    0.00       3/3           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [88]
[83]     0.0    0.00    0.00       3         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [83]
-----------------------------------------------
                0.00    0.00       3/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [90]
[84]     0.0    0.00    0.00       3         __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_ptr() [84]
                0.00    0.00       3/3           __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_addr() [85]
-----------------------------------------------
                0.00    0.00       3/3           __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_ptr() [84]
[85]     0.0    0.00    0.00       3         __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_addr() [85]
-----------------------------------------------
                0.00    0.00       1/3           TxDescriptor::validate() [211]
                0.00    0.00       2/3           TxDescriptor::open_for_read(void*) [16]
[86]     0.0    0.00    0.00       3         LockVar::operator*() const [86]
-----------------------------------------------
                0.00    0.00       1/3           __gnu_cxx::new_allocator<TxDescriptor>::allocate(unsigned long, void const*) [218]
                0.00    0.00       2/3           std::allocator_traits<std::allocator<TxDescriptor> >::max_size(std::allocator<TxDescriptor> const&) [152]
[87]     0.0    0.00    0.00       3         __gnu_cxx::new_allocator<TxDescriptor>::max_size() const [87]
-----------------------------------------------
                0.00    0.00       1/3           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
                0.00    0.00       1/3           std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_Sp_ebo_helper(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [267]
[88]     0.0    0.00    0.00       3         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [88]
                0.00    0.00       3/3           __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [83]
-----------------------------------------------
                0.00    0.00       1/3           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [259]
                0.00    0.00       2/3           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [146]
[89]     0.0    0.00    0.00       3         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [89]
-----------------------------------------------
                0.00    0.00       1/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
                0.00    0.00       1/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [381]
                0.00    0.00       1/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [285]
[90]     0.0    0.00    0.00       3         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [90]
                0.00    0.00       3/3           __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_ptr() [84]
-----------------------------------------------
                0.00    0.00       1/3           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [334]
                0.00    0.00       1/3           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [335]
                0.00    0.00       1/3           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) [333]
[91]     0.0    0.00    0.00       3         std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [91]
-----------------------------------------------
                0.00    0.00       1/3           std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
                0.00    0.00       1/3           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&) [262]
                0.00    0.00       1/3           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>) [263]
[92]     0.0    0.00    0.00       3         std::remove_reference<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>::type&& std::move<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>(std::remove_reference&&) [92]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::TxDescriptor() [212]
[93]     0.0    0.00    0.00       2         TMAllocList::TMAllocList(unsigned long) [93]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::vector() [163]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::~TxDescriptor() [213]
[94]     0.0    0.00    0.00       2         TMAllocList::~TMAllocList() [94]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::~vector() [164]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::open_for_write(void*, unsigned long) [17]
[95]     0.0    0.00    0.00       2         LockVar::SetWriteBit() [95]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::to_string(unsigned long) [176]
[96]     0.0    0.00    0.00       2         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [96]
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [172]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator_traits<std::allocator<void*> >::deallocate(std::allocator<void*>&, void**, unsigned long) [153]
[97]     0.0    0.00    0.00       2         __gnu_cxx::new_allocator<void*>::deallocate(void**, unsigned long) [97]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator_traits<std::allocator<void*> >::allocate(std::allocator<void*>&, unsigned long) [154]
[98]     0.0    0.00    0.00       2         __gnu_cxx::new_allocator<void*>::allocate(unsigned long, void const*) [98]
                0.00    0.00       2/4           __gnu_cxx::new_allocator<void*>::max_size() const [60]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator<void*>::allocator() [124]
[99]     0.0    0.00    0.00       2         __gnu_cxx::new_allocator<void*>::new_allocator() [99]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator<void*>::~allocator() [125]
[100]    0.0    0.00    0.00       2         __gnu_cxx::new_allocator<void*>::~new_allocator() [100]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator<std::_List_node<TxDescriptor::LogEntry> >::allocator() [126]
[101]    0.0    0.00    0.00       2         __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::new_allocator() [101]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator<std::_List_node<TxDescriptor::LogEntry> >::~allocator() [127]
[102]    0.0    0.00    0.00       2         __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::~new_allocator() [102]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [128]
[103]    0.0    0.00    0.00       2         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [103]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [129]
[104]    0.0    0.00    0.00       2         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [104]
-----------------------------------------------
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [170]
[105]    0.0    0.00    0.00       2         bool __gnu_cxx::__is_null_pointer<char>(char*) [105]
-----------------------------------------------
                0.00    0.00       1/2           std::vector<void*, std::allocator<void*> >::begin() [306]
                0.00    0.00       1/2           std::vector<void*, std::allocator<void*> >::end() [305]
[106]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::__normal_iterator(void** const&) [106]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [112]
[107]    0.0    0.00    0.00       2         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2}) [107]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [195]
[108]    0.0    0.00    0.00       2         bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [108]
                0.00    0.00       2/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
                0.00    0.00       2/2           TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}::operator()(TxDescriptor::LogEntry const&) const [200]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(__gnu_cxx::__ops::_Iter_pred) [113]
[109]    0.0    0.00    0.00       2         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#3}) [109]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, std::input_iterator_tag) [197]
[110]    0.0    0.00    0.00       2         bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [110]
                0.00    0.00       2/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
                0.00    0.00       2/2           TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}::operator()(TxDescriptor::LogEntry const&) const [201]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [114]
[111]    0.0    0.00    0.00       2         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2}) [111]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}) [187]
[112]    0.0    0.00    0.00       2         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [112]
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2}) [107]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}) [188]
[113]    0.0    0.00    0.00       2         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(__gnu_cxx::__ops::_Iter_pred) [113]
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#3}) [109]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}) [189]
[114]    0.0    0.00    0.00       2         __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [114]
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2}) [111]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}::operator()(TxDescriptor::LogEntry const&) const [201]
[115]    0.0    0.00    0.00       2         TxDescriptor::LogEntry::ReferToSameMetadata(LockVar const&) const [115]
                0.00    0.00       2/9           VersionedWriteLock::AddrToLockVar(void*, bool) [39]
-----------------------------------------------
                0.00    0.00       2/2           bool __gnu_cxx::operator!=<void**, std::vector<void*, std::allocator<void*> > >(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&, __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&) [227]
[116]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::base() const [116]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::max_size() const [120]
[117]    0.0    0.00    0.00       2         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() const [117]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::max_size() const [123]
[118]    0.0    0.00    0.00       2         std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() const [118]
-----------------------------------------------
                0.00    0.00       2/2           bool std::operator==<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&) [330]
[119]    0.0    0.00    0.00       2         std::move_iterator<TxDescriptor*>::base() const [119]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const [232]
[120]    0.0    0.00    0.00       2         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::max_size() const [120]
                0.00    0.00       2/2           std::allocator_traits<std::allocator<TxDescriptor> >::max_size(std::allocator<TxDescriptor> const&) [152]
                0.00    0.00       2/2           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() const [117]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
[121]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::size() const [121]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
[122]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::capacity() const [122]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
[123]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::max_size() const [123]
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() const [118]
                0.00    0.00       2/2           std::allocator_traits<std::allocator<void*> >::max_size(std::allocator<void*> const&) [155]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::_Vector_impl() [142]
[124]    0.0    0.00    0.00       2         std::allocator<void*>::allocator() [124]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<void*>::new_allocator() [99]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::~_Vector_impl() [143]
[125]    0.0    0.00    0.00       2         std::allocator<void*>::~allocator() [125]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<void*>::~new_allocator() [100]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::_List_impl() [165]
[126]    0.0    0.00    0.00       2         std::allocator<std::_List_node<TxDescriptor::LogEntry> >::allocator() [126]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::new_allocator() [101]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::~_List_impl() [166]
[127]    0.0    0.00    0.00       2         std::allocator<std::_List_node<TxDescriptor::LogEntry> >::~allocator() [127]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::~new_allocator() [102]
-----------------------------------------------
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [380]
[128]    0.0    0.00    0.00       2         std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [128]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [103]
-----------------------------------------------
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [380]
[129]    0.0    0.00    0.00       2         std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [129]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [104]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) [136]
[130]    0.0    0.00    0.00       2         std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) [130]
-----------------------------------------------
                0.00    0.00       1/2           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
                0.00    0.00       1/2           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [244]
[131]    0.0    0.00    0.00       2         std::_Head_base<0ul, void (*)(int), false>::_Head_base<void (*)(int)>(void (*&&)(int)) [131]
                0.00    0.00       2/7           void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) [137]
[132]    0.0    0.00    0.00       2         std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [132]
-----------------------------------------------
                0.00    0.00       1/2           std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&) [245]
                0.00    0.00       1/2           std::_Tuple_impl<1ul, int>::_Tuple_impl<int>(int&&) [246]
[133]    0.0    0.00    0.00       2         std::_Head_base<1ul, int, false>::_Head_base<int>(int&&) [133]
                0.00    0.00       2/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::_List_impl() [165]
[134]    0.0    0.00    0.00       2         std::_List_node<unsigned long>::_List_node<>() [134]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::_Impl_base::~_Impl_base() [296]
                0.00    0.00       1/2           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
[135]    0.0    0.00    0.00       2         std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [135]
                0.00    0.00       2/2           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [146]
-----------------------------------------------
                0.00    0.00       1/2           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
                0.00    0.00       1/2           void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) [312]
[136]    0.0    0.00    0.00       2         std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) [136]
                0.00    0.00       2/2           std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) [130]
-----------------------------------------------
                0.00    0.00       1/2           std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&) [245]
                0.00    0.00       1/2           int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) [313]
[137]    0.0    0.00    0.00       2         std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) [137]
                0.00    0.00       2/2           std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [132]
-----------------------------------------------
                0.00    0.00       2/2           void** std::__copy_move_a<true, void**, void**>(void**, void**, void**) [180]
[138]    0.0    0.00    0.00       2         void** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<void*>(void* const*, void* const*, void**) [138]
-----------------------------------------------
                0.00    0.00       2/2           void std::_Destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [191]
[139]    0.0    0.00    0.00       2         void std::_Destroy_aux<false>::__destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [139]
                0.00    0.00       1/1           void std::_Destroy<TxDescriptor>(TxDescriptor*) [329]
                0.00    0.00       1/2           TxDescriptor* std::__addressof<TxDescriptor>(TxDescriptor&) [179]
-----------------------------------------------
                0.00    0.00       1/2           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::~_Vector_base() [255]
                0.00    0.00       1/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[140]    0.0    0.00    0.00       2         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_deallocate(TxDescriptor*, unsigned long) [140]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<TxDescriptor> >::deallocate(std::allocator<TxDescriptor>&, TxDescriptor*, unsigned long) [278]
-----------------------------------------------
                0.00    0.00       2/2           void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>) [160]
[141]    0.0    0.00    0.00       2         std::_Vector_base<void*, std::allocator<void*> >::_M_allocate(unsigned long) [141]
                0.00    0.00       2/2           std::allocator_traits<std::allocator<void*> >::allocate(std::allocator<void*>&, unsigned long) [154]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_Vector_base() [144]
[142]    0.0    0.00    0.00       2         std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::_Vector_impl() [142]
                0.00    0.00       2/2           std::allocator<void*>::allocator() [124]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base() [145]
[143]    0.0    0.00    0.00       2         std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::~_Vector_impl() [143]
                0.00    0.00       2/2           std::allocator<void*>::~allocator() [125]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::vector() [163]
[144]    0.0    0.00    0.00       2         std::_Vector_base<void*, std::allocator<void*> >::_Vector_base() [144]
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::_Vector_impl() [142]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::~vector() [164]
[145]    0.0    0.00    0.00       2         std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base() [145]
                0.00    0.00       2/4           std::_Vector_base<void*, std::allocator<void*> >::_M_deallocate(void**, unsigned long) [67]
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::~_Vector_impl() [143]
-----------------------------------------------
                0.00    0.00       2/2           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [135]
[146]    0.0    0.00    0.00       2         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [146]
                0.00    0.00       2/3           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [89]
-----------------------------------------------
                0.00    0.00       2/2           std::move_iterator<TxDescriptor*> std::__make_move_if_noexcept_iterator<TxDescriptor*, std::move_iterator<TxDescriptor*> >(TxDescriptor*) [185]
[147]    0.0    0.00    0.00       2         std::move_iterator<TxDescriptor*>::move_iterator(TxDescriptor*) [147]
-----------------------------------------------
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() [157]
[148]    0.0    0.00    0.00       2         std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>&) [148]
-----------------------------------------------
                0.00    0.00       1/2           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>&&) [257]
                0.00    0.00       1/2           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [256]
[149]    0.0    0.00    0.00       2         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [149]
-----------------------------------------------
                0.00    0.00       1/2           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&) [316]
                0.00    0.00       1/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [380]
[150]    0.0    0.00    0.00       2         std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*) [150]
-----------------------------------------------
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [380]
[151]    0.0    0.00    0.00       2         std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [151]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [282]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::max_size() const [120]
[152]    0.0    0.00    0.00       2         std::allocator_traits<std::allocator<TxDescriptor> >::max_size(std::allocator<TxDescriptor> const&) [152]
                0.00    0.00       2/3           __gnu_cxx::new_allocator<TxDescriptor>::max_size() const [87]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_M_deallocate(void**, unsigned long) [67]
[153]    0.0    0.00    0.00       2         std::allocator_traits<std::allocator<void*> >::deallocate(std::allocator<void*>&, void**, unsigned long) [153]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<void*>::deallocate(void**, unsigned long) [97]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_M_allocate(unsigned long) [141]
[154]    0.0    0.00    0.00       2         std::allocator_traits<std::allocator<void*> >::allocate(std::allocator<void*>&, unsigned long) [154]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<void*>::allocate(unsigned long, void const*) [98]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::max_size() const [123]
[155]    0.0    0.00    0.00       2         std::allocator_traits<std::allocator<void*> >::max_size(std::allocator<void*> const&) [155]
                0.00    0.00       2/4           __gnu_cxx::new_allocator<void*>::max_size() const [60]
-----------------------------------------------
                0.00    0.00       2/2           void** std::uninitialized_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [182]
[156]    0.0    0.00    0.00       2         void** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [156]
                0.00    0.00       2/2           void** std::copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [186]
-----------------------------------------------
                0.00    0.00       1/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [381]
                0.00    0.00       1/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [380]
[157]    0.0    0.00    0.00       2         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() [157]
                0.00    0.00       2/2           std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>&) [148]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::joinable() const [231]
                0.00    0.00       1/2           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
[158]    0.0    0.00    0.00       2         std::thread::id::id() [158]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::clear() [161]
[159]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::_M_erase_at_end(void**) [159]
                0.00    0.00       2/8           std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() [40]
                0.00    0.00       2/6           void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&) [54]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
[160]    0.0    0.00    0.00       2         void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>) [160]
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_M_allocate(unsigned long) [141]
                0.00    0.00       2/8           std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() [40]
                0.00    0.00       2/2           void** std::__uninitialized_copy_a<std::move_iterator<void**>, void**, void*>(std::move_iterator<void**>, std::move_iterator<void**>, void**, std::allocator<void*>&) [184]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::reset(bool) [210]
[161]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::clear() [161]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::_M_erase_at_end(void**) [159]
-----------------------------------------------
                0.00    0.00       2/2           TMAllocList::TMAllocList(unsigned long) [93]
[162]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::reserve(unsigned long) [162]
                0.00    0.00       4/4           std::move_iterator<void**> std::__make_move_if_noexcept_iterator<void**, std::move_iterator<void**> >(void**) [82]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::max_size() const [123]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::capacity() const [122]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::size() const [121]
                0.00    0.00       2/2           void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>) [160]
                0.00    0.00       2/8           std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() [40]
                0.00    0.00       2/6           void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&) [54]
                0.00    0.00       2/4           std::_Vector_base<void*, std::allocator<void*> >::_M_deallocate(void**, unsigned long) [67]
-----------------------------------------------
                0.00    0.00       2/2           TMAllocList::TMAllocList(unsigned long) [93]
[163]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::vector() [163]
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::_Vector_base() [144]
-----------------------------------------------
                0.00    0.00       2/2           TMAllocList::~TMAllocList() [94]
[164]    0.0    0.00    0.00       2         std::vector<void*, std::allocator<void*> >::~vector() [164]
                0.00    0.00       2/8           std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() [40]
                0.00    0.00       2/6           void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&) [54]
                0.00    0.00       2/2           std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base() [145]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_base() [167]
[165]    0.0    0.00    0.00       2         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::_List_impl() [165]
                0.00    0.00       2/2           std::allocator<std::_List_node<TxDescriptor::LogEntry> >::allocator() [126]
                0.00    0.00       2/2           std::_List_node<unsigned long>::_List_node<>() [134]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~_List_base() [168]
[166]    0.0    0.00    0.00       2         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::~_List_impl() [166]
                0.00    0.00       2/2           std::allocator<std::_List_node<TxDescriptor::LogEntry> >::~allocator() [127]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::list() [174]
[167]    0.0    0.00    0.00       2         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_base() [167]
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::_List_impl() [165]
                0.00    0.00       2/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_init() [75]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~list() [175]
[168]    0.0    0.00    0.00       2         std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~_List_base() [168]
                0.00    0.00       2/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear() [76]
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::~_List_impl() [166]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [172]
[169]    0.0    0.00    0.00       2         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [169]
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [171]
-----------------------------------------------
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [171]
[170]    0.0    0.00    0.00       2         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [170]
                0.00    0.00       2/2           bool __gnu_cxx::__is_null_pointer<char>(char*) [105]
                0.00    0.00       2/2           std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [193]
-----------------------------------------------
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [169]
[171]    0.0    0.00    0.00       2         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [171]
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [170]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [96]
[172]    0.0    0.00    0.00       2         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [172]
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [169]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::reset(bool) [210]
[173]    0.0    0.00    0.00       2         std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::clear() [173]
                0.00    0.00       2/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear() [76]
                0.00    0.00       2/4           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_init() [75]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::TxDescriptor() [212]
[174]    0.0    0.00    0.00       2         std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::list() [174]
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_base() [167]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::~TxDescriptor() [213]
[175]    0.0    0.00    0.00       2         std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~list() [175]
                0.00    0.00       2/2           std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~_List_base() [168]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [228]
[176]    0.0    0.00    0.00       2         std::__cxx11::to_string(unsigned long) [176]
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [96]
-----------------------------------------------
                0.00    0.00       1/2           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>) [263]
                0.00    0.00       1/2           TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}& std::_Any_data::_M_access<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>() [309]
[177]    0.0    0.00    0.00       2         std::_Any_data::_M_access() [177]
-----------------------------------------------
                0.00    0.00       2/2           std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [193]
[178]    0.0    0.00    0.00       2         std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) [178]
-----------------------------------------------
                0.00    0.00       1/2           void std::_Destroy_aux<false>::__destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [139]
                0.00    0.00       1/2           TxDescriptor* std::__uninitialized_default_n_1<false>::__uninit_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [291]
[179]    0.0    0.00    0.00       2         TxDescriptor* std::__addressof<TxDescriptor>(TxDescriptor&) [179]
-----------------------------------------------
                0.00    0.00       2/2           void** std::__copy_move_a2<true, void**, void**>(void**, void**, void**) [181]
[180]    0.0    0.00    0.00       2         void** std::__copy_move_a<true, void**, void**>(void**, void**, void**) [180]
                0.00    0.00       2/2           void** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<void*>(void* const*, void* const*, void**) [138]
-----------------------------------------------
                0.00    0.00       2/2           void** std::copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [186]
[181]    0.0    0.00    0.00       2         void** std::__copy_move_a2<true, void**, void**>(void**, void**, void**) [181]
                0.00    0.00       6/6           std::_Niter_base<void**>::iterator_type std::__niter_base<void**>(void**) [52]
                0.00    0.00       2/2           void** std::__copy_move_a<true, void**, void**>(void**, void**, void**) [180]
-----------------------------------------------
                0.00    0.00       2/2           void** std::__uninitialized_copy_a<std::move_iterator<void**>, void**, void*>(std::move_iterator<void**>, std::move_iterator<void**>, void**, std::allocator<void*>&) [184]
[182]    0.0    0.00    0.00       2         void** std::uninitialized_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [182]
                0.00    0.00       2/2           void** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [156]
-----------------------------------------------
                0.00    0.00       2/2           std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [193]
[183]    0.0    0.00    0.00       2         std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) [183]
-----------------------------------------------
                0.00    0.00       2/2           void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>) [160]
[184]    0.0    0.00    0.00       2         void** std::__uninitialized_copy_a<std::move_iterator<void**>, void**, void*>(std::move_iterator<void**>, std::move_iterator<void**>, void**, std::allocator<void*>&) [184]
                0.00    0.00       2/2           void** std::uninitialized_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [182]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor* std::__uninitialized_move_if_noexcept_a<TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor> >(TxDescriptor*, TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [322]
[185]    0.0    0.00    0.00       2         std::move_iterator<TxDescriptor*> std::__make_move_if_noexcept_iterator<TxDescriptor*, std::move_iterator<TxDescriptor*> >(TxDescriptor*) [185]
                0.00    0.00       2/2           std::move_iterator<TxDescriptor*>::move_iterator(TxDescriptor*) [147]
-----------------------------------------------
                0.00    0.00       2/2           void** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [156]
[186]    0.0    0.00    0.00       2         void** std::copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [186]
                0.00    0.00       4/4           std::_Miter_base<std::move_iterator<void**> >::iterator_type std::__miter_base<std::move_iterator<void**> >(std::move_iterator<void**>) [81]
                0.00    0.00       2/2           void** std::__copy_move_a2<true, void**, void**>(void**, void**, void**) [181]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::open_for_read(void*) [16]
[187]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}) [187]
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [112]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>) [194]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::open_for_read(void*) [16]
[188]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}) [188]
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(__gnu_cxx::__ops::_Iter_pred) [113]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>) [196]
-----------------------------------------------
                0.00    0.00       2/2           TxDescriptor::open_for_write(void*, unsigned long) [17]
[189]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}) [189]
                0.00    0.00       2/2           __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [114]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>) [198]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
                0.00    0.00       1/2           std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&) [314]
[190]    0.0    0.00    0.00       2         void (&std::forward<void (&)(int)>(std::remove_reference<void (&)(int)>::type&))(int) [190]
-----------------------------------------------
                0.00    0.00       2/2           void std::_Destroy<TxDescriptor*, TxDescriptor>(TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [192]
[191]    0.0    0.00    0.00       2         void std::_Destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [191]
                0.00    0.00       2/2           void std::_Destroy_aux<false>::__destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [139]
-----------------------------------------------
                0.00    0.00       1/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::~vector() [387]
                0.00    0.00       1/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[192]    0.0    0.00    0.00       2         void std::_Destroy<TxDescriptor*, TxDescriptor>(TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [192]
                0.00    0.00       2/2           void std::_Destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [191]
-----------------------------------------------
                0.00    0.00       2/2           void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [170]
[193]    0.0    0.00    0.00       2         std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [193]
                0.00    0.00       2/2           std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) [183]
                0.00    0.00       2/2           std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) [178]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}) [187]
[194]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>) [194]
                0.00    0.00       2/200000006     std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&) [15]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [195]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>) [194]
[195]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [195]
                0.00    0.00       4/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00       2/2           bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [108]
                0.00    0.00       2/4           std::_List_iterator<TxDescriptor::LogEntry>::operator++() [70]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}) [188]
[196]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>) [196]
                0.00    0.00       2/200000006     std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&) [15]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, std::input_iterator_tag) [197]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>) [196]
[197]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, std::input_iterator_tag) [197]
                0.00    0.00       2/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00       2/2           bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [110]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}) [189]
[198]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>) [198]
                0.00    0.00       2/200000006     std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&) [15]
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [199]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>) [198]
[199]    0.0    0.00    0.00       2         std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag) [199]
                0.00    0.00       2/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
-----------------------------------------------
                0.00    0.00       2/2           bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [108]
[200]    0.0    0.00    0.00       2         TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}::operator()(TxDescriptor::LogEntry const&) const [200]
-----------------------------------------------
                0.00    0.00       2/2           bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [110]
[201]    0.0    0.00    0.00       2         TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}::operator()(TxDescriptor::LogEntry const&) const [201]
                0.00    0.00       2/2           TxDescriptor::LogEntry::ReferToSameMetadata(LockVar const&) const [115]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [431]
[202]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3STM10desc_tableE [202]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [205]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [431]
[203]    0.0    0.00    0.00       1         _GLOBAL__sub_I_a [203]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [206]
-----------------------------------------------
                0.00    0.00       1/1           void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
[204]    0.0    0.00    0.00       1         wo(int) [204]
                0.00    0.00 100000000/100000000     void STM::Store<int>(int, int*, int) [19]
                0.00    0.00 100000000/100000000     int STM::Load<int>(int, int*) [18]
                0.00    0.00 3010000/203010000     STM::GetDesc(int) [12]
                0.00    0.00       1/1           TxDescriptor::validate() [211]
                0.00    0.00       1/9           VersionedWriteLock::AddrToLockVar(void*, bool) [39]
                0.00    0.00       1/1           TxDescriptor::reset(bool) [210]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN3STM10desc_tableE [202]
[205]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [205]
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::vector() [304]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I_a [203]
[206]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [206]
-----------------------------------------------
                0.00    0.00       1/1           std::operator==(std::thread::id, std::thread::id) [331]
[207]    0.0    0.00    0.00       1         __gthread_equal(unsigned long, unsigned long) [207]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::reset(bool) [210]
[208]    0.0    0.00    0.00       1         TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>) [208]
                0.00    0.00       1/1           std::vector<void*, std::allocator<void*> >::begin() [306]
                0.00    0.00       1/1           std::vector<void*, std::allocator<void*> >::end() [305]
                0.00    0.00       1/1           bool __gnu_cxx::operator!=<void**, std::vector<void*, std::allocator<void*> > >(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&, __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&) [227]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::TxDescriptor() [212]
[209]    0.0    0.00    0.00       1         TxDescriptor::Stats::Stats() [209]
-----------------------------------------------
                0.00    0.00       1/1           wo(int) [204]
[210]    0.0    0.00    0.00       1         TxDescriptor::reset(bool) [210]
                0.00    0.00       2/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00       2/2           std::vector<void*, std::allocator<void*> >::clear() [161]
                0.00    0.00       2/2           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::clear() [173]
                0.00    0.00       1/6           std::lock_guard<std::mutex>::lock_guard(std::mutex&) [47]
                0.00    0.00       1/200000008     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin() [13]
                0.00    0.00       1/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00       1/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
                0.00    0.00       1/9           VersionedWriteLock::AddrToLockVar(void*, bool) [39]
                0.00    0.00       1/1           LockVar::ClearWriteBitAndIncTimestamp() [216]
                0.00    0.00       1/4           std::_List_iterator<TxDescriptor::LogEntry>::operator++() [70]
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
                0.00    0.00       1/1           TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>) [208]
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::~function() [308]
                0.00    0.00       1/6           std::lock_guard<std::mutex>::~lock_guard() [48]
-----------------------------------------------
                0.00    0.00       1/1           wo(int) [204]
[211]    0.0    0.00    0.00       1         TxDescriptor::validate() [211]
                0.00    0.00       2/400000018     std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [10]
                0.00    0.00       1/200000008     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin() [13]
                0.00    0.00       1/400000022     std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end() [9]
                0.00    0.00       1/200000006     std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [14]
                0.00    0.00       1/9           VersionedWriteLock::AddrToLockVar(void*, bool) [39]
                0.00    0.00       1/6           std::lock_guard<std::mutex>::lock_guard(std::mutex&) [47]
                0.00    0.00       1/3           LockVar::operator*() const [86]
                0.00    0.00       1/6           std::lock_guard<std::mutex>::~lock_guard() [48]
                0.00    0.00       1/4           std::_List_iterator<TxDescriptor::LogEntry>::operator++() [70]
-----------------------------------------------
                0.00    0.00       1/1           void std::_Construct<TxDescriptor>(TxDescriptor*) [310]
[212]    0.0    0.00    0.00       1         TxDescriptor::TxDescriptor() [212]
                0.00    0.00       2/2           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::list() [174]
                0.00    0.00       2/2           TMAllocList::TMAllocList(unsigned long) [93]
                0.00    0.00       1/1           TxDescriptor::Stats::Stats() [209]
-----------------------------------------------
                0.00    0.00       1/1           void std::_Destroy<TxDescriptor>(TxDescriptor*) [329]
[213]    0.0    0.00    0.00       1         TxDescriptor::~TxDescriptor() [213]
                0.00    0.00       2/2           TMAllocList::~TMAllocList() [94]
                0.00    0.00       2/2           std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~list() [175]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[214]    0.0    0.00    0.00       1         STM::Exit() [214]
                0.00    0.00       2/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [36]
                0.00    0.00       1/203010002     std::vector<TxDescriptor, std::allocator<TxDescriptor> >::operator[](unsigned long) [11]
                0.00    0.00       1/1           TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [228]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[215]    0.0    0.00    0.00       1         STM::Init(int) [215]
                0.00    0.00       2/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [36]
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::resize(unsigned long) [303]
                0.00    0.00       1/203010002     std::vector<TxDescriptor, std::allocator<TxDescriptor> >::operator[](unsigned long) [11]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::reset(bool) [210]
[216]    0.0    0.00    0.00       1         LockVar::ClearWriteBitAndIncTimestamp() [216]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<TxDescriptor> >::deallocate(std::allocator<TxDescriptor>&, TxDescriptor*, unsigned long) [278]
[217]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<TxDescriptor>::deallocate(TxDescriptor*, unsigned long) [217]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<TxDescriptor> >::allocate(std::allocator<TxDescriptor>&, unsigned long) [279]
[218]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<TxDescriptor>::allocate(unsigned long, void const*) [218]
                0.00    0.00       1/3           __gnu_cxx::new_allocator<TxDescriptor>::max_size() const [87]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<TxDescriptor>::allocator() [234]
[219]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<TxDescriptor>::new_allocator() [219]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<TxDescriptor>::~allocator() [235]
[220]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<TxDescriptor>::~new_allocator() [220]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [280]
[221]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [221]
                0.00    0.00       1/1           std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::~_Impl() [299]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEEE9constructIS7_IS6_EEEvRS8_PT_DpOT0_ [281]
[222]    0.0    0.00    0.00       1         _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_ [222]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/8           operator new(unsigned long, void*) [42]
                0.00    0.00       1/1           std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&) [298]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator() [236]
[223]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator() [223]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [282]
[224]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [224]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [283]
[225]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [225]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [229]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >) [286]
[226]    0.0    0.00    0.00       1         __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::__aligned_buffer() [226]
                0.00    0.00       1/1           std::aligned_storage<40ul, 8ul>::aligned_storage() [274]
-----------------------------------------------
                0.00    0.00       1/1           TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>) [208]
[227]    0.0    0.00    0.00       1         bool __gnu_cxx::operator!=<void**, std::vector<void*, std::allocator<void*> > >(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&, __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&) [227]
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::base() const [116]
-----------------------------------------------
                0.00    0.00       1/1           STM::Exit() [214]
[228]    0.0    0.00    0.00       1         TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [228]
                0.00    0.00       2/2           std::__cxx11::to_string(unsigned long) [176]
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [335]
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) [333]
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [334]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [225]
[229]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [229]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [258]
[230]    0.0    0.00    0.00       1         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [230]
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [285]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::~thread() [301]
[231]    0.0    0.00    0.00       1         std::thread::joinable() const [231]
                0.00    0.00       1/2           std::thread::id::id() [158]
                0.00    0.00       1/1           std::operator==(std::thread::id, std::thread::id) [331]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[232]    0.0    0.00    0.00       1         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const [232]
                0.00    0.00       4/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [36]
                0.00    0.00       2/2           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::max_size() const [120]
                0.00    0.00       1/1           unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [325]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [285]
[233]    0.0    0.00    0.00       1         std::type_info::operator==(std::type_info const&) const [233]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::_Vector_impl() [252]
[234]    0.0    0.00    0.00       1         std::allocator<TxDescriptor>::allocator() [234]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<TxDescriptor>::new_allocator() [219]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::~_Vector_impl() [253]
[235]    0.0    0.00    0.00       1         std::allocator<TxDescriptor>::~allocator() [235]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<TxDescriptor>::~new_allocator() [220]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [311]
[236]    0.0    0.00    0.00       1         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator() [236]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator() [223]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Impl_base::_Impl_base() [295]
[237]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl_base>::shared_ptr() [237]
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [256]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
[238]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&&) [238]
                0.00    0.00       1/1           std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&) [327]
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>&&) [257]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [315]
[239]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [239]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [258]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
[240]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~shared_ptr() [240]
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [259]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [276]
[241]    0.0    0.00    0.00       1         std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [241]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
[242]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, void (*)(int), int>::_M_tail(std::_Tuple_impl<0ul, void (*)(int), int>&) [242]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<void (*)(int), int>::tuple(std::tuple<void (*)(int), int>&&) [293]
[243]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
                0.00    0.00       1/1           std::remove_reference<std::_Tuple_impl<1ul, int>&>::type&& std::move<std::_Tuple_impl<1ul, int>&>(std::_Tuple_impl<1ul, int>&) [328]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_M_tail(std::_Tuple_impl<0ul, void (*)(int), int>&) [242]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&) [245]
                0.00    0.00       1/2           std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) [136]
                0.00    0.00       1/7           void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
                0.00    0.00       1/2           std::_Head_base<0ul, void (*)(int), false>::_Head_base<void (*)(int)>(void (*&&)(int)) [131]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&) [294]
[244]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [244]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/7           void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, int>::_Tuple_impl<int>(int&&) [246]
                0.00    0.00       1/2           std::_Head_base<0ul, void (*)(int), false>::_Head_base<void (*)(int)>(void (*&&)(int)) [131]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
[245]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&) [245]
                0.00    0.00       1/2           std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) [137]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/2           std::_Head_base<1ul, int, false>::_Head_base<int>(int&&) [133]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [244]
[246]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, int>::_Tuple_impl<int>(int&&) [246]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/2           std::_Head_base<1ul, int, false>::_Head_base<int>(int&&) [133]
-----------------------------------------------
                0.00    0.00       1/1           std::_Bind_simple<void (*(int))(int)>::operator()() [250]
[247]    0.0    0.00    0.00       1         void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&) [323]
                0.00    0.00       1/7           void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&) [324]
                0.00    0.00       1/1           wo(int) [204]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&) [298]
[248]    0.0    0.00    0.00       1         std::_Bind_simple<void (*(int))(int)>::_Bind_simple(std::_Bind_simple<void (*(int))(int)>&&) [248]
                0.00    0.00       1/1           std::tuple<void (*)(int), int>::tuple(std::tuple<void (*)(int), int>&&) [293]
-----------------------------------------------
                0.00    0.00       1/1           std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&) [314]
[249]    0.0    0.00    0.00       1         std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&) [249]
                0.00    0.00       1/7           void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/1           std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&) [294]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_M_run() [384]
[250]    0.0    0.00    0.00       1         std::_Bind_simple<void (*(int))(int)>::operator()() [250]
                0.00    0.00       1/1           void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[251]    0.0    0.00    0.00       1         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_allocate(unsigned long) [251]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<TxDescriptor> >::allocate(std::allocator<TxDescriptor>&, unsigned long) [279]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_base() [254]
[252]    0.0    0.00    0.00       1         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::_Vector_impl() [252]
                0.00    0.00       1/1           std::allocator<TxDescriptor>::allocator() [234]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::~_Vector_base() [255]
[253]    0.0    0.00    0.00       1         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::~_Vector_impl() [253]
                0.00    0.00       1/1           std::allocator<TxDescriptor>::~allocator() [235]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::vector() [304]
[254]    0.0    0.00    0.00       1         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_base() [254]
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::_Vector_impl() [252]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::~vector() [387]
[255]    0.0    0.00    0.00       1         std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::~_Vector_base() [255]
                0.00    0.00       1/2           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_deallocate(TxDescriptor*, unsigned long) [140]
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::~_Vector_impl() [253]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl_base>::shared_ptr() [237]
[256]    0.0    0.00    0.00       1         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [256]
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [149]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&&) [238]
[257]    0.0    0.00    0.00       1         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>&&) [257]
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [149]
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [269]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [239]
[258]    0.0    0.00    0.00       1         std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [258]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [230]
                0.00    0.00       1/1           void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...) [321]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~shared_ptr() [240]
[259]    0.0    0.00    0.00       1         std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [259]
                0.00    0.00       1/3           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [89]
-----------------------------------------------
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}> const&, std::_Manager_operation) [261]
[260]    0.0    0.00    0.00       1         std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>) [260]
                0.00    0.00       1/1           TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}& std::_Any_data::_M_access<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>() [309]
-----------------------------------------------
                0.00    0.00       1/1           std::_Function_base::~_Function_base() [266]
[261]    0.0    0.00    0.00       1         std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}> const&, std::_Manager_operation) [261]
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>) [260]
-----------------------------------------------
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
[262]    0.0    0.00    0.00       1         std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&) [262]
                0.00    0.00       1/3           std::remove_reference<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>::type&& std::move<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>(std::remove_reference&&) [92]
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>) [263]
-----------------------------------------------
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&) [262]
[263]    0.0    0.00    0.00       1         std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>) [263]
                0.00    0.00       1/3           std::remove_reference<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>::type&& std::move<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>(std::remove_reference&&) [92]
                0.00    0.00       1/2           std::_Any_data::_M_access() [177]
                0.00    0.00       1/8           operator new(unsigned long, void*) [42]
-----------------------------------------------
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
[264]    0.0    0.00    0.00       1         bool std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_not_empty_function<{lambda(void*, unsigned long)#1}>({lambda(void*, unsigned long)#1} const&) [264]
-----------------------------------------------
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
[265]    0.0    0.00    0.00       1         std::_Function_base::_Function_base() [265]
-----------------------------------------------
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::~function() [308]
[266]    0.0    0.00    0.00       1         std::_Function_base::~_Function_base() [266]
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}> const&, std::_Manager_operation) [261]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >) [286]
[267]    0.0    0.00    0.00       1         std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_Sp_ebo_helper(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [267]
                0.00    0.00       1/3           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [88]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [287]
[268]    0.0    0.00    0.00       1         std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::~_Sp_ebo_helper() [268]
                0.00    0.00       1/4           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [63]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>&&) [257]
[269]    0.0    0.00    0.00       1         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [269]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [258]
[270]    0.0    0.00    0.00       1         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
                0.00    0.00       1/2           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [128]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::get() [272]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&) [316]
                0.00    0.00       1/1           std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [326]
                0.00    0.00       1/3           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [88]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/8           operator new(unsigned long, void*) [42]
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
                0.00    0.00       1/4           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [63]
                0.00    0.00       1/2           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [151]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr)) [273]
                0.00    0.00       1/2           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [129]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::get() [272]
[271]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_raw_ptr(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*) [271]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
[272]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::get() [272]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_raw_ptr(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*) [271]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
[273]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr)) [273]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::__aligned_buffer() [226]
[274]    0.0    0.00    0.00       1         std::aligned_storage<40ul, 8ul>::aligned_storage() [274]
-----------------------------------------------
                0.00    0.00       1/1           std::_Maybe_unary_or_binary_function<void, void*, unsigned long>::_Maybe_unary_or_binary_function() [292]
[275]    0.0    0.00    0.00       1         std::binary_function<void*, unsigned long, void>::binary_function() [275]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
[276]    0.0    0.00    0.00       1         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [276]
                0.00    0.00       1/1           std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [241]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [289]
[277]    0.0    0.00    0.00       1         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [277]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_deallocate(TxDescriptor*, unsigned long) [140]
[278]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<TxDescriptor> >::deallocate(std::allocator<TxDescriptor>&, TxDescriptor*, unsigned long) [278]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<TxDescriptor>::deallocate(TxDescriptor*, unsigned long) [217]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_allocate(unsigned long) [251]
[279]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<TxDescriptor> >::allocate(std::allocator<TxDescriptor>&, unsigned long) [279]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<TxDescriptor>::allocate(unsigned long, void const*) [218]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [381]
[280]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [280]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [221]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
[281]    0.0    0.00    0.00       1         _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEEE9constructIS7_IS6_EEEvRS8_PT_DpOT0_ [281]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_ [222]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [151]
[282]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [282]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [224]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&) [316]
[283]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [283]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [225]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::uninitialized_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [317]
[284]    0.0    0.00    0.00       1         TxDescriptor* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [284]
                0.00    0.00       1/1           bool std::operator!=<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&) [332]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [230]
[285]    0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [285]
                0.00    0.00       1/1           std::type_info::operator==(std::type_info const&) const [233]
                0.00    0.00       1/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [90]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
[286]    0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >) [286]
                0.00    0.00       1/1           std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_Sp_ebo_helper(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [267]
                0.00    0.00       1/1           __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::__aligned_buffer() [226]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [289]
[287]    0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [287]
                0.00    0.00       1/1           std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::~_Sp_ebo_helper() [268]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
[288]    0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [288]
                0.00    0.00       1/1           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [276]
                0.00    0.00       1/3           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [88]
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >) [286]
                0.00    0.00       1/4           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [63]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [90]
                0.00    0.00       1/1           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEEE9constructIS7_IS6_EEEvRS8_PT_DpOT0_ [281]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [380]
[289]    0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [289]
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [287]
                0.00    0.00       1/1           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [277]
-----------------------------------------------
                0.00    0.00       1/1           std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&) [314]
[290]    0.0    0.00    0.00       1         std::_Maybe_wrap_member_pointer<void (*)(int)>::__do_wrap(void (*&&)(int)) [290]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [319]
[291]    0.0    0.00    0.00       1         TxDescriptor* std::__uninitialized_default_n_1<false>::__uninit_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [291]
                0.00    0.00       1/2           TxDescriptor* std::__addressof<TxDescriptor>(TxDescriptor&) [179]
                0.00    0.00       1/1           void std::_Construct<TxDescriptor>(TxDescriptor*) [310]
-----------------------------------------------
                0.00    0.00       1/1           std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
[292]    0.0    0.00    0.00       1         std::_Maybe_unary_or_binary_function<void, void*, unsigned long>::_Maybe_unary_or_binary_function() [292]
                0.00    0.00       1/1           std::binary_function<void*, unsigned long, void>::binary_function() [275]
-----------------------------------------------
                0.00    0.00       1/1           std::_Bind_simple<void (*(int))(int)>::_Bind_simple(std::_Bind_simple<void (*(int))(int)>&&) [248]
[293]    0.0    0.00    0.00       1         std::tuple<void (*)(int), int>::tuple(std::tuple<void (*)(int), int>&&) [293]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
-----------------------------------------------
                0.00    0.00       1/1           std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&) [249]
[294]    0.0    0.00    0.00       1         std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&) [294]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/7           void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) [43]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [244]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&) [298]
[295]    0.0    0.00    0.00       1         std::thread::_Impl_base::_Impl_base() [295]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl_base>::shared_ptr() [237]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::~_Impl() [299]
[296]    0.0    0.00    0.00       1         std::thread::_Impl_base::~_Impl_base() [296]
                0.00    0.00       1/2           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [135]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
[297]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [297]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [311]
-----------------------------------------------
                0.00    0.00       1/1           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_ [222]
[298]    0.0    0.00    0.00       1         std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&) [298]
                0.00    0.00       1/1           std::thread::_Impl_base::_Impl_base() [295]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           std::_Bind_simple<void (*(int))(int)>::_Bind_simple(std::_Bind_simple<void (*(int))(int)>&&) [248]
-----------------------------------------------
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [221]
[299]    0.0    0.00    0.00       1         std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::~_Impl() [299]
                0.00    0.00       1/1           std::thread::_Impl_base::~_Impl_base() [296]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[300]    0.0    0.00    0.00       1         std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/2           std::thread::id::id() [158]
                0.00    0.00       1/2           void (&std::forward<void (&)(int)>(std::remove_reference<void (&)(int)>::type&))(int) [190]
                0.00    0.00       1/1           std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&) [314]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [297]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&&) [238]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~shared_ptr() [240]
                0.00    0.00       1/2           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [135]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[301]    0.0    0.00    0.00       1         std::thread::~thread() [301]
                0.00    0.00       1/1           std::thread::joinable() const [231]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::resize(unsigned long) [303]
[302]    0.0    0.00    0.00       1         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
                0.00    0.00       3/4           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() [66]
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const [232]
                0.00    0.00       1/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [36]
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_allocate(unsigned long) [251]
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_move_if_noexcept_a<TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor> >(TxDescriptor*, TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [322]
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_default_n_a<TxDescriptor*, unsigned long, TxDescriptor>(TxDescriptor*, unsigned long, std::allocator<TxDescriptor>&) [320]
                0.00    0.00       1/2           void std::_Destroy<TxDescriptor*, TxDescriptor>(TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [192]
                0.00    0.00       1/2           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_deallocate(TxDescriptor*, unsigned long) [140]
-----------------------------------------------
                0.00    0.00       1/1           STM::Init(int) [215]
[303]    0.0    0.00    0.00       1         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::resize(unsigned long) [303]
                0.00    0.00       2/11          std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [36]
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
-----------------------------------------------
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [205]
[304]    0.0    0.00    0.00       1         std::vector<TxDescriptor, std::allocator<TxDescriptor> >::vector() [304]
                0.00    0.00       1/1           std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_base() [254]
-----------------------------------------------
                0.00    0.00       1/1           TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>) [208]
[305]    0.0    0.00    0.00       1         std::vector<void*, std::allocator<void*> >::end() [305]
                0.00    0.00       1/2           __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::__normal_iterator(void** const&) [106]
-----------------------------------------------
                0.00    0.00       1/1           TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>) [208]
[306]    0.0    0.00    0.00       1         std::vector<void*, std::allocator<void*> >::begin() [306]
                0.00    0.00       1/2           __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::__normal_iterator(void** const&) [106]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::reset(bool) [210]
[307]    0.0    0.00    0.00       1         std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}) [307]
                0.00    0.00       1/1           std::_Maybe_unary_or_binary_function<void, void*, unsigned long>::_Maybe_unary_or_binary_function() [292]
                0.00    0.00       1/1           bool std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_not_empty_function<{lambda(void*, unsigned long)#1}>({lambda(void*, unsigned long)#1} const&) [264]
                0.00    0.00       1/1           std::_Function_base::_Function_base() [265]
                0.00    0.00       1/3           std::remove_reference<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>::type&& std::move<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>(std::remove_reference&&) [92]
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&) [262]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::reset(bool) [210]
[308]    0.0    0.00    0.00       1         std::function<void (void*, unsigned long)>::~function() [308]
                0.00    0.00       1/1           std::_Function_base::~_Function_base() [266]
-----------------------------------------------
                0.00    0.00       1/1           std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>) [260]
[309]    0.0    0.00    0.00       1         TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}& std::_Any_data::_M_access<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>() [309]
                0.00    0.00       1/2           std::_Any_data::_M_access() [177]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_default_n_1<false>::__uninit_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [291]
[310]    0.0    0.00    0.00       1         void std::_Construct<TxDescriptor>(TxDescriptor*) [310]
                0.00    0.00       1/8           operator new(unsigned long, void*) [42]
                0.00    0.00       1/1           TxDescriptor::TxDescriptor() [212]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [297]
[311]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [311]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator() [236]
                0.00    0.00       1/4           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [63]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [315]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&) [323]
[312]    0.0    0.00    0.00       1         void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) [312]
                0.00    0.00       1/2           std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) [136]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&) [324]
[313]    0.0    0.00    0.00       1         int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) [313]
                0.00    0.00       1/2           std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) [137]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [300]
[314]    0.0    0.00    0.00       1         std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&) [314]
                0.00    0.00       1/10          int&& std::forward<int>(std::remove_reference<int>::type&) [38]
                0.00    0.00       1/2           void (&std::forward<void (&)(int)>(std::remove_reference<void (&)(int)>::type&))(int) [190]
                0.00    0.00       1/1           std::_Maybe_wrap_member_pointer<void (*)(int)>::__do_wrap(void (*&&)(int)) [290]
                0.00    0.00       1/1           std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&) [249]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [311]
[315]    0.0    0.00    0.00       1         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [315]
                0.00    0.00       1/10          std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&) [37]
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [239]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
[316]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&) [316]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [283]
                0.00    0.00       1/2           std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*) [150]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_copy_a<std::move_iterator<TxDescriptor*>, TxDescriptor*, TxDescriptor>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*, std::allocator<TxDescriptor>&) [318]
[317]    0.0    0.00    0.00       1         TxDescriptor* std::uninitialized_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [317]
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [284]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_move_if_noexcept_a<TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor> >(TxDescriptor*, TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [322]
[318]    0.0    0.00    0.00       1         TxDescriptor* std::__uninitialized_copy_a<std::move_iterator<TxDescriptor*>, TxDescriptor*, TxDescriptor>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*, std::allocator<TxDescriptor>&) [318]
                0.00    0.00       1/1           TxDescriptor* std::uninitialized_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [317]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_default_n_a<TxDescriptor*, unsigned long, TxDescriptor>(TxDescriptor*, unsigned long, std::allocator<TxDescriptor>&) [320]
[319]    0.0    0.00    0.00       1         TxDescriptor* std::__uninitialized_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [319]
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_default_n_1<false>::__uninit_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [291]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[320]    0.0    0.00    0.00       1         TxDescriptor* std::__uninitialized_default_n_a<TxDescriptor*, unsigned long, TxDescriptor>(TxDescriptor*, unsigned long, std::allocator<TxDescriptor>&) [320]
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [319]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [258]
[321]    0.0    0.00    0.00       1         void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...) [321]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [302]
[322]    0.0    0.00    0.00       1         TxDescriptor* std::__uninitialized_move_if_noexcept_a<TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor> >(TxDescriptor*, TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&) [322]
                0.00    0.00       2/2           std::move_iterator<TxDescriptor*> std::__make_move_if_noexcept_iterator<TxDescriptor*, std::move_iterator<TxDescriptor*> >(TxDescriptor*) [185]
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_copy_a<std::move_iterator<TxDescriptor*>, TxDescriptor*, TxDescriptor>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*, std::allocator<TxDescriptor>&) [318]
-----------------------------------------------
                0.00    0.00       1/1           void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
[323]    0.0    0.00    0.00       1         std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&) [323]
                0.00    0.00       1/1           void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) [312]
-----------------------------------------------
                0.00    0.00       1/1           void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [247]
[324]    0.0    0.00    0.00       1         std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&) [324]
                0.00    0.00       1/1           int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) [313]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const [232]
[325]    0.0    0.00    0.00       1         unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [325]
-----------------------------------------------
                0.00    0.00       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [270]
[326]    0.0    0.00    0.00       1         std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [326]
-----------------------------------------------
                0.00    0.00       1/1           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&&) [238]
[327]    0.0    0.00    0.00       1         std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&) [327]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [243]
[328]    0.0    0.00    0.00       1         std::remove_reference<std::_Tuple_impl<1ul, int>&>::type&& std::move<std::_Tuple_impl<1ul, int>&>(std::_Tuple_impl<1ul, int>&) [328]
-----------------------------------------------
                0.00    0.00       1/1           void std::_Destroy_aux<false>::__destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [139]
[329]    0.0    0.00    0.00       1         void std::_Destroy<TxDescriptor>(TxDescriptor*) [329]
                0.00    0.00       1/1           TxDescriptor::~TxDescriptor() [213]
-----------------------------------------------
                0.00    0.00       1/1           bool std::operator!=<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&) [332]
[330]    0.0    0.00    0.00       1         bool std::operator==<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&) [330]
                0.00    0.00       2/2           std::move_iterator<TxDescriptor*>::base() const [119]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::joinable() const [231]
[331]    0.0    0.00    0.00       1         std::operator==(std::thread::id, std::thread::id) [331]
                0.00    0.00       1/1           __gthread_equal(unsigned long, unsigned long) [207]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [284]
[332]    0.0    0.00    0.00       1         bool std::operator!=<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&) [332]
                0.00    0.00       1/1           bool std::operator==<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&) [330]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [228]
[333]    0.0    0.00    0.00       1         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) [333]
                0.00    0.00       1/3           std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [91]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [228]
[334]    0.0    0.00    0.00       1         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [334]
                0.00    0.00       1/3           std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [91]
-----------------------------------------------
                0.00    0.00       1/1           TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [228]
[335]    0.0    0.00    0.00       1         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [335]
                0.00    0.00       1/3           std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [91]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [202] _GLOBAL__sub_I__ZN3STM10desc_tableE (stm.cpp) [46] std::_Iter_base<void**, false>::_S_base(void**) [11] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::operator[](unsigned long)
 [203] _GLOBAL__sub_I_a (de.cpp) [64] std::_Iter_base<std::move_iterator<void**>, true>::_S_base(std::move_iterator<void**>) [159] std::vector<void*, std::allocator<void*> >::_M_erase_at_end(void**)
 [204] wo(int)                [65] std::_List_node<TxDescriptor::LogEntry>::_List_node<>() [160] void** std::vector<void*, std::allocator<void*> >::_M_allocate_and_copy<std::move_iterator<void**> >(unsigned long, std::move_iterator<void**>, std::move_iterator<void**>)
 [205] __static_initialization_and_destruction_0(int, int) (stm.cpp) [134] std::_List_node<unsigned long>::_List_node<>() [305] std::vector<void*, std::allocator<void*> >::end()
 [206] __static_initialization_and_destruction_0(int, int) (de.cpp) [47] std::lock_guard<std::mutex>::lock_guard(std::mutex&) [306] std::vector<void*, std::allocator<void*> >::begin()
 [207] __gthread_equal(unsigned long, unsigned long) (gthr-default.h) [48] std::lock_guard<std::mutex>::~lock_guard() [161] std::vector<void*, std::allocator<void*> >::clear()
  [35] __gthread_active_p() (gthr-default.h) [237] std::shared_ptr<std::thread::_Impl_base>::shared_ptr() [162] std::vector<void*, std::allocator<void*> >::reserve(unsigned long)
  [44] __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h) [238] std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&&) [163] std::vector<void*, std::allocator<void*> >::vector()
  [45] __gthread_mutex_unlock(pthread_mutex_t*) (gthr-default.h) [135] std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [164] std::vector<void*, std::allocator<void*> >::~vector()
 [208] TMAllocList::ReleaseAllForward(std::function<void (void*, unsigned long)>) [239] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [165] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::_List_impl()
  [93] TMAllocList::TMAllocList(unsigned long) [240] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~shared_ptr() [166] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_impl::~_List_impl()
  [94] TMAllocList::~TMAllocList() [241] std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [71] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_node()
  [16] TxDescriptor::open_for_read(void*) [136] std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) [72] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_inc_size(unsigned long)
  [17] TxDescriptor::open_for_write(void*, unsigned long) [242] std::_Tuple_impl<0ul, void (*)(int), int>::_M_tail(std::_Tuple_impl<0ul, void (*)(int), int>&) [73] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_put_node(std::_List_node<TxDescriptor::LogEntry>*)
 [209] TxDescriptor::Stats::Stats() [243] std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl(std::_Tuple_impl<0ul, void (*)(int), int>&&) [74] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_set_size(unsigned long)
 [210] TxDescriptor::reset(bool) [244] std::_Tuple_impl<0ul, void (*)(int), int>::_Tuple_impl<void (*)(int), int, void>(void (*&&)(int), int&&) [41] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_get_Node_allocator()
 [211] TxDescriptor::validate() [245] std::_Tuple_impl<1ul, int>::_Tuple_impl(std::_Tuple_impl<1ul, int>&&) [75] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_init()
 [212] TxDescriptor::TxDescriptor() [137] std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) [76] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_clear()
 [213] TxDescriptor::~TxDescriptor() [246] std::_Tuple_impl<1ul, int>::_Tuple_impl<int>(int&&) [167] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_List_base()
  [39] VersionedWriteLock::AddrToLockVar(void*, bool) [138] void** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<void*>(void* const*, void* const*, void**) [168] std::__cxx11::_List_base<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~_List_base()
 [214] STM::Exit()           [247] void std::_Bind_simple<void (*(int))(int)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) [169] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)
 [215] STM::Init(int)        [248] std::_Bind_simple<void (*(int))(int)>::_Bind_simple(std::_Bind_simple<void (*(int))(int)>&&) [170] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
  [18] int STM::Load<int>(int, int*) [249] std::_Bind_simple<void (*(int))(int)>::_Bind_simple<void (*)(int), int>(void (*&&)(int), int&&) [171] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)
  [19] void STM::Store<int>(int, int*, int) [250] std::_Bind_simple<void (*(int))(int)>::operator()() [172] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
  [12] STM::GetDesc(int)     [139] void std::_Destroy_aux<false>::__destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*) [77] void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::emplace_back<>()
  [95] LockVar::SetWriteBit() [49] void std::_Destroy_aux<true>::__destroy<void**>(void**, void**) [78] std::_List_node<TxDescriptor::LogEntry>* std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_create_node<>()
 [216] LockVar::ClearWriteBitAndIncTimestamp() [251] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_allocate(unsigned long) [9] std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::end()
  [96] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [252] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::_Vector_impl() [79] std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::back()
 [217] __gnu_cxx::new_allocator<TxDescriptor>::deallocate(TxDescriptor*, unsigned long) [253] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_impl::~_Vector_impl() [13] std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::begin()
 [218] __gnu_cxx::new_allocator<TxDescriptor>::allocate(unsigned long, void const*) [140] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_deallocate(TxDescriptor*, unsigned long) [173] std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::clear()
 [219] __gnu_cxx::new_allocator<TxDescriptor>::new_allocator() [66] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() [80] void std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::_M_insert<>(std::_List_iterator<TxDescriptor::LogEntry>)
 [220] __gnu_cxx::new_allocator<TxDescriptor>::~new_allocator() [254] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_Vector_base() [174] std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::list()
 [221] void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [255] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::~_Vector_base() [175] std::__cxx11::list<TxDescriptor::LogEntry, std::allocator<TxDescriptor::LogEntry> >::~list()
 [222] _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEE9constructIS8_IS7_EEEvPT_DpOT0_ [141] std::_Vector_base<void*, std::allocator<void*> >::_M_allocate(unsigned long) [176] std::__cxx11::to_string(unsigned long)
 [223] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator() [142] std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::_Vector_impl() [307] std::function<void (void*, unsigned long)>::function<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}, void, void>(TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1})
  [83] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [143] std::_Vector_base<void*, std::allocator<void*> >::_Vector_impl::~_Vector_impl() [308] std::function<void (void*, unsigned long)>::~function()
  [55] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~new_allocator() [67] std::_Vector_base<void*, std::allocator<void*> >::_M_deallocate(void**, unsigned long) [177] std::_Any_data::_M_access()
  [97] __gnu_cxx::new_allocator<void*>::deallocate(void**, unsigned long) [40] std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() [309] TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}& std::_Any_data::_M_access<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>()
  [98] __gnu_cxx::new_allocator<void*>::allocate(unsigned long, void const*) [144] std::_Vector_base<void*, std::allocator<void*> >::_Vector_base() [310] void std::_Construct<TxDescriptor>(TxDescriptor*)
  [99] __gnu_cxx::new_allocator<void*>::new_allocator() [145] std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base() [178] std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)
 [100] __gnu_cxx::new_allocator<void*>::~new_allocator() [256] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [179] TxDescriptor* std::__addressof<TxDescriptor>(TxDescriptor&)
  [56] __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::deallocate(std::_List_node<TxDescriptor::LogEntry>*, unsigned long) [257] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>&&) [311] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::make_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&)
  [57] void __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::destroy<std::_List_node<TxDescriptor::LogEntry> >(std::_List_node<TxDescriptor::LogEntry>*) [146] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [312] void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int)
  [58] __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::allocate(unsigned long, void const*) [258] std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [313] int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&)
  [59] _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN12TxDescriptor8LogEntryEEE9constructIS4_IEEEvPT_DpOT0_ [259] std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [81] std::_Miter_base<std::move_iterator<void**> >::iterator_type std::__miter_base<std::move_iterator<void**> >(std::move_iterator<void**>)
 [101] __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::new_allocator() [147] std::move_iterator<TxDescriptor*>::move_iterator(TxDescriptor*) [52] std::_Niter_base<void**>::iterator_type std::__niter_base<void**>(void**)
 [102] __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::~new_allocator() [68] std::move_iterator<void**>::move_iterator(void**) [314] std::_Bind_simple_helper<void (&)(int), int>::__type std::__bind_simple<void (&)(int), int>(void (&)(int), int&&)
 [224] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [260] std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>) [180] void** std::__copy_move_a<true, void**, void**>(void**, void**, void**)
 [225] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [261] std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}> const&, std::_Manager_operation) [181] void** std::__copy_move_a2<true, void**, void**>(void**, void**, void**)
 [103] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [262] std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&) [315] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&)
 [104] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [263] std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_init_functor(std::_Any_data&, {lambda(void*, unsigned long)#1}&&, std::integral_constant<bool, true>) [316] std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&)
  [84] __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_ptr() [264] bool std::_Function_base::_Base_manager<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}>::_M_not_empty_function<{lambda(void*, unsigned long)#1}>({lambda(void*, unsigned long)#1} const&) [317] TxDescriptor* std::uninitialized_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*)
  [85] __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::_M_addr() [265] std::_Function_base::_Function_base() [182] void** std::uninitialized_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**)
 [226] __gnu_cxx::__aligned_buffer<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::__aligned_buffer() [266] std::_Function_base::~_Function_base() [183] std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)
 [105] bool __gnu_cxx::__is_null_pointer<char>(char*) [8] std::_List_iterator<TxDescriptor::LogEntry>::_List_iterator(std::__detail::_List_node_base*) [15] std::iterator_traits<std::_List_iterator<TxDescriptor::LogEntry> >::iterator_category std::__iterator_category<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry> const&)
 [106] __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::__normal_iterator(void** const&) [69] std::_List_iterator<TxDescriptor::LogEntry>::operator--() [318] TxDescriptor* std::__uninitialized_copy_a<std::move_iterator<TxDescriptor*>, TxDescriptor*, TxDescriptor>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*, std::allocator<TxDescriptor>&)
 [107] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2}) [70] std::_List_iterator<TxDescriptor::LogEntry>::operator++() [184] void** std::__uninitialized_copy_a<std::move_iterator<void**>, void**, void*>(std::move_iterator<void**>, std::move_iterator<void**>, void**, std::allocator<void*>&)
 [108] bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [148] std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>&) [319] TxDescriptor* std::__uninitialized_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long)
 [109] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#3}) [267] std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::_Sp_ebo_helper(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [320] TxDescriptor* std::__uninitialized_default_n_a<TxDescriptor*, unsigned long, TxDescriptor>(TxDescriptor*, unsigned long, std::allocator<TxDescriptor>&)
 [110] bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [268] std::_Sp_ebo_helper<0, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, true>::~_Sp_ebo_helper() [321] void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...)
  [20] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1}) [269] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [185] std::move_iterator<TxDescriptor*> std::__make_move_if_noexcept_iterator<TxDescriptor*, std::move_iterator<TxDescriptor*> >(TxDescriptor*)
  [30] bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [270] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&, std::_Bind_simple<void (*(int))(int)>&&) [82] std::move_iterator<void**> std::__make_move_if_noexcept_iterator<void**, std::move_iterator<void**> >(void**)
 [111] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#2}) [149] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [322] TxDescriptor* std::__uninitialized_move_if_noexcept_a<TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor> >(TxDescriptor*, TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&)
  [21] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::_Iter_pred({lambda(TxDescriptor::LogEntry const&)#1}) [89] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [323] std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&)
  [31] bool __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>::operator()<std::_List_iterator<TxDescriptor::LogEntry> >(std::_List_iterator<TxDescriptor::LogEntry>) [271] std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_raw_ptr(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*) [324] std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&)
 [112] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [272] std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::get() [325] unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
 [113] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(__gnu_cxx::__ops::_Iter_pred) [150] std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*) [186] void** std::copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**)
  [22] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [151] std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [326] std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&)
 [114] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(__gnu_cxx::__ops::_Iter_pred) [273] std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr)) [91] std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
  [23] __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> __gnu_cxx::__ops::__pred_iter<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(__gnu_cxx::__ops::_Iter_pred) [274] std::aligned_storage<40ul, 8ul>::aligned_storage() [327] std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&)
 [227] bool __gnu_cxx::operator!=<void**, std::vector<void*, std::allocator<void*> > >(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&, __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > > const&) [275] std::binary_function<void*, unsigned long, void>::binary_function() [328] std::remove_reference<std::_Tuple_impl<1ul, int>&>::type&& std::move<std::_Tuple_impl<1ul, int>&>(std::_Tuple_impl<1ul, int>&)
 [228] TxDescriptor::Stats::concat_all_stats[abi:cxx11]() const [276] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [92] std::remove_reference<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>::type&& std::move<TxDescriptor::reset(bool)::{lambda(void*, unsigned long)#1}&>(std::remove_reference&&)
 [115] TxDescriptor::LogEntry::ReferToSameMetadata(LockVar const&) const [277] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [187] std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2})
  [34] LockVar::TestWriteBit() const [278] std::allocator_traits<std::allocator<TxDescriptor> >::deallocate(std::allocator<TxDescriptor>&, TxDescriptor*, unsigned long) [188] std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3})
  [86] LockVar::operator*() const [279] std::allocator_traits<std::allocator<TxDescriptor> >::allocate(std::allocator<TxDescriptor>&, unsigned long) [24] std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1})
  [87] __gnu_cxx::new_allocator<TxDescriptor>::max_size() const [152] std::allocator_traits<std::allocator<TxDescriptor> >::max_size(std::allocator<TxDescriptor> const&) [189] std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2})
  [60] __gnu_cxx::new_allocator<void*>::max_size() const [280] void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >*) [25] std::_List_iterator<TxDescriptor::LogEntry> std::find_if<std::_List_iterator<TxDescriptor::LogEntry>, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>(TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}, TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1})
  [61] __gnu_cxx::new_allocator<std::_List_node<TxDescriptor::LogEntry> >::max_size() const [281] _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviEiEEEEEE9constructIS7_IS6_EEEvRS8_PT_DpOT0_ [43] void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int)
 [229] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [153] std::allocator_traits<std::allocator<void*> >::deallocate(std::allocator<void*>&, void**, unsigned long) [190] void (&std::forward<void (&)(int)>(std::remove_reference<void (&)(int)>::type&))(int)
 [116] __gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >::base() const [154] std::allocator_traits<std::allocator<void*> >::allocate(std::allocator<void*>&, unsigned long) [37] std::_Bind_simple<void (*(int))(int)>&& std::forward<std::_Bind_simple<void (*(int))(int)> >(std::remove_reference<std::_Bind_simple<void (*(int))(int)> >::type&)
 [117] std::_Vector_base<TxDescriptor, std::allocator<TxDescriptor> >::_M_get_Tp_allocator() const [155] std::allocator_traits<std::allocator<void*> >::max_size(std::allocator<void*> const&) [38] int&& std::forward<int>(std::remove_reference<int>::type&)
 [118] std::_Vector_base<void*, std::allocator<void*> >::_M_get_Tp_allocator() const [282] std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [329] void std::_Destroy<TxDescriptor>(TxDescriptor*)
 [119] std::move_iterator<TxDescriptor*>::base() const [283] std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [191] void std::_Destroy<TxDescriptor*>(TxDescriptor*, TxDescriptor*)
  [62] std::move_iterator<void**>::base() const [284] TxDescriptor* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<TxDescriptor*>, TxDescriptor*>(std::move_iterator<TxDescriptor*>, std::move_iterator<TxDescriptor*>, TxDescriptor*) [192] void std::_Destroy<TxDescriptor*, TxDescriptor>(TxDescriptor*, TxDescriptor*, std::allocator<TxDescriptor>&)
  [14] std::_List_iterator<TxDescriptor::LogEntry>::operator*() const [156] void** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<void**>, void**>(std::move_iterator<void**>, std::move_iterator<void**>, void**) [53] void std::_Destroy<void**>(void**, void**)
  [10] std::_List_iterator<TxDescriptor::LogEntry>::operator!=(std::_List_iterator<TxDescriptor::LogEntry> const&) const [285] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [54] void std::_Destroy<void**, void*>(void**, void**, std::allocator<void*>&)
 [230] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [157] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() [193] std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)
 [231] std::thread::joinable() const [286] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >) [194] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>)
 [232] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_check_len(unsigned long, char const*) const [287] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [195] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag)
  [36] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::size() const [90] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [196] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>)
 [120] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::max_size() const [288] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::_Bind_simple<void (*(int))(int)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, std::_Bind_simple<void (*(int))(int)>&&) [197] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}>, std::input_iterator_tag)
 [121] std::vector<void*, std::allocator<void*> >::size() const [289] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [26] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>)
 [122] std::vector<void*, std::allocator<void*> >::capacity() const [290] std::_Maybe_wrap_member_pointer<void (*)(int)>::__do_wrap(void (*&&)(int)) [27] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag)
 [123] std::vector<void*, std::allocator<void*> >::max_size() const [291] TxDescriptor* std::__uninitialized_default_n_1<false>::__uninit_default_n<TxDescriptor*, unsigned long>(TxDescriptor*, unsigned long) [198] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>)
 [233] std::type_info::operator==(std::type_info const&) const [292] std::_Maybe_unary_or_binary_function<void, void*, unsigned long>::_Maybe_unary_or_binary_function() [199] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#2}>, std::input_iterator_tag)
 [234] std::allocator<TxDescriptor>::allocator() [50] std::mutex::lock() [28] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>)
 [235] std::allocator<TxDescriptor>::~allocator() [51] std::mutex::unlock() [29] std::_List_iterator<TxDescriptor::LogEntry> std::__find_if<std::_List_iterator<TxDescriptor::LogEntry>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, __gnu_cxx::__ops::_Iter_pred<TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}>, std::input_iterator_tag)
  [88] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [293] std::tuple<void (*)(int), int>::tuple(std::tuple<void (*)(int), int>&&) [330] bool std::operator==<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&)
 [236] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::allocator() [294] std::tuple<void (*)(int), int>::tuple<void (*)(int), int, void>(void (*&&)(int), int&&) [331] std::operator==(std::thread::id, std::thread::id)
  [63] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >::~allocator() [295] std::thread::_Impl_base::_Impl_base() [332] bool std::operator!=<TxDescriptor*>(std::move_iterator<TxDescriptor*> const&, std::move_iterator<TxDescriptor*> const&)
 [124] std::allocator<void*>::allocator() [296] std::thread::_Impl_base::~_Impl_base() [333] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
 [125] std::allocator<void*>::~allocator() [297] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int))(int)> >(std::_Bind_simple<void (*(int))(int)>&&) [334] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
 [126] std::allocator<std::_List_node<TxDescriptor::LogEntry> >::allocator() [158] std::thread::id::id() [335] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
 [127] std::allocator<std::_List_node<TxDescriptor::LogEntry> >::~allocator() [298] std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::_Impl(std::_Bind_simple<void (*(int))(int)>&&) [200] TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#2}::operator()(TxDescriptor::LogEntry const&) const
 [128] std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > > const&) [299] std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >::~_Impl() [201] TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#3}::operator()(TxDescriptor::LogEntry const&) const
 [129] std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int))(int)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [300] std::thread::thread<void (&)(int), int>(void (&)(int), int&&) [32] TxDescriptor::open_for_read(void*)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const
 [130] std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) [301] std::thread::~thread() [33] TxDescriptor::open_for_write(void*, unsigned long)::{lambda(TxDescriptor::LogEntry const&)#1}::operator()(TxDescriptor::LogEntry const&) const
 [131] std::_Head_base<0ul, void (*)(int), false>::_Head_base<void (*)(int)>(void (*&&)(int)) [302] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::_M_default_append(unsigned long) [42] operator new(unsigned long, void*)
 [132] std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [303] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::resize(unsigned long)
 [133] std::_Head_base<1ul, int, false>::_Head_base<int>(int&&) [304] std::vector<TxDescriptor, std::allocator<TxDescriptor> >::vector()
